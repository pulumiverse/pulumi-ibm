// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ibm

import (
	"fmt"
	"path/filepath"

	ibm "github.com/IBM-Cloud/terraform-provider-ibm/ibm/provider"
	"github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfbridge"
	shim "github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfshim"
	shimv2 "github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfshim/sdk-v2"
	"github.com/pulumi/pulumi/sdk/v3/go/common/resource"
	"github.com/pulumiverse/pulumi-ibm/provider/pkg/version"
)

// all of the token components used below.
const (
	// This variable controls the default name of the package in the package
	// registries for nodejs and python:
	mainPkg = "ibm"
	// modules:
	mainMod = "index" // the ibm module
)

// preConfigureCallback is called before the providerConfigure function of the underlying provider.
// It should validate that the provider can be configured, and provide actionable errors in the case
// it cannot be. Configuration variables can be read from `vars` using the `stringValue` function -
// for example `stringValue(vars, "accessKey")`.
func preConfigureCallback(vars resource.PropertyMap, c shim.ResourceConfig) error {
	return nil
}

// Provider returns additional overlaid schema and metadata associated with the provider..
func Provider() tfbridge.ProviderInfo {
	// Instantiate the Terraform provider
	p := shimv2.NewProvider(ibm.Provider())

	// Create a Pulumi provider mapping
	prov := tfbridge.ProviderInfo{
		P:    p,
		Name: "ibm",
		// DisplayName is a way to be able to change the casing of the provider
		// name when being displayed on the Pulumi registry
		DisplayName: "IBM Cloud",
		// The default publisher for all packages is Pulumi.
		// Change this to your personal name (or a company name) that you
		// would like to be shown in the Pulumi Registry if this package is published
		// there.
		Publisher: "Pulumiverse",
		// LogoURL is optional but useful to help identify your package in the Pulumi Registry
		// if this package is published there.
		//
		// You may host a logo on a domain you control or add an SVG logo for your package
		// in your repository and use the raw content URL for that file as your logo URL.
		LogoURL: "https://raw.githubusercontent.com/pulumiverse/.github/main/assets/mascot.png",
		// PluginDownloadURL is an optional URL used to download the Provider
		// for use in Pulumi programs
		// https://www.pulumi.com/docs/guides/pulumi-packages/how-to-author/#support-for-github-releases
		PluginDownloadURL: "github://api.github.com/pulumiverse",
		Description:       "A Pulumi package for creating and managing IBM Cloud resources.",
		// category/cloud tag helps with categorizing the package in the Pulumi Registry.
		// For all available categories, see `Keywords` in
		// https://www.pulumi.com/docs/guides/pulumi-packages/schema/#package.
		Keywords:   []string{"pulumi", "ibm", "category/cloud"},
		License:    "Apache-2.0",
		Homepage:   "https://github.com/pulumiverse/",
		Repository: "https://github.com/pulumiverse/pulumi-ibm",
		// The GitHub Org for the provider - defaults to `terraform-providers`. Note that this
		// should match the TF provider module's require directive, not any replace directives.
		GitHubOrg: "IBM-Cloud",
		Config: map[string]*tfbridge.SchemaInfo{
			"region": {
				Type: tfbridge.MakeType(mainPkg, "region", "Region"),
				Default: &tfbridge.DefaultInfo{
					EnvVars: []string{"IBM_REGION", "IBM_DEFAULT_REGION"},
				},
			},
		},
		PreConfigureCallback: preConfigureCallback,
		Resources: map[string]*tfbridge.ResourceInfo{
			"ibm_api_gateway_endpoint":                 {Tok: tfbridge.MakeResource(mainPkg, "apiGateway", "ApiGatewayEndpoint")},
			"ibm_api_gateway_endpoint_subscription":    {Tok: tfbridge.MakeResource(mainPkg, "apiGateway", "ApiGatewayEndpointSubscription")},
			"ibm_app":                                  {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "App")},
			"ibm_app_config_environment":               {Tok: tfbridge.MakeResource(mainPkg, "appConfiguration", "AppConfigEnvironment")},
			"ibm_app_config_feature":                   {Tok: tfbridge.MakeResource(mainPkg, "appConfiguration", "AppConfigFeature")},
			"ibm_app_domain_private":                   {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "AppDomainPrivate")},
			"ibm_app_domain_shared":                    {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "AppDomainShared")},
			"ibm_app_route":                            {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "AppRoute")},
			"ibm_appid_action_url":                     {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidActionUrl")},
			"ibm_appid_apm":                            {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidApm")},
			"ibm_appid_application":                    {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidApplication")},
			"ibm_appid_application_roles":              {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidApplicationRoles")},
			"ibm_appid_application_scopes":             {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidApplicationScopes")},
			"ibm_appid_audit_status":                   {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidAuditStatus")},
			"ibm_appid_cloud_directory_template":       {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidCloudDirectoryTemplate")},
			"ibm_appid_cloud_directory_user":           {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidCloudDirectoryUser")},
			"ibm_appid_idp_cloud_directory":            {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidIdpCloudDirectory")},
			"ibm_appid_idp_custom":                     {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidIdpCustom")},
			"ibm_appid_idp_facebook":                   {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidIdpFacebook")},
			"ibm_appid_idp_google":                     {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidIdpGoogle")},
			"ibm_appid_idp_saml":                       {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidIdpSaml")},
			"ibm_appid_languages":                      {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidLanguages")},
			"ibm_appid_mfa":                            {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidMfa")},
			"ibm_appid_mfa_channel":                    {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidMfaChannel")},
			"ibm_appid_password_regex":                 {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidPasswordRegex")},
			"ibm_appid_redirect_urls":                  {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidRedirectUrls")},
			"ibm_appid_role":                           {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidRole")},
			"ibm_appid_theme_color":                    {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidThemeColor")},
			"ibm_appid_theme_text":                     {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidThemeText")},
			"ibm_appid_token_config":                   {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidTokenConfig")},
			"ibm_appid_user_roles":                     {Tok: tfbridge.MakeResource(mainPkg, "appIdManagement", "AppidUserRoles")},
			"ibm_atracker_route":                       {Tok: tfbridge.MakeResource(mainPkg, "activityTracker", "AtrackerRoute")},
			"ibm_atracker_settings":                    {Tok: tfbridge.MakeResource(mainPkg, "activityTracker", "AtrackerSettings")},
			"ibm_atracker_target":                      {Tok: tfbridge.MakeResource(mainPkg, "activityTracker", "AtrackerTarget")},
			"ibm_cbr_rule":                             {Tok: tfbridge.MakeResource(mainPkg, "contextBasedRestrictions", "CbrRule")},
			"ibm_cbr_zone":                             {Tok: tfbridge.MakeResource(mainPkg, "contextBasedRestrictions", "CbrZone")},
			"ibm_cd_tekton_pipeline":                   {Tok: tfbridge.MakeResource(mainPkg, "cdTekton", "CdTektonPipeline")},
			"ibm_cd_tekton_pipeline_definition":        {Tok: tfbridge.MakeResource(mainPkg, "cdTekton", "CdTektonPipelineDefinition")},
			"ibm_cd_tekton_pipeline_property":          {Tok: tfbridge.MakeResource(mainPkg, "cdTekton", "CdTektonPipelineProperty")},
			"ibm_cd_tekton_pipeline_trigger":           {Tok: tfbridge.MakeResource(mainPkg, "cdTekton", "CdTektonPipelineTrigger")},
			"ibm_cd_tekton_pipeline_trigger_property":  {Tok: tfbridge.MakeResource(mainPkg, "cdTekton", "CdTektonPipelineTriggerProperty")},
			"ibm_cd_toolchain":                         {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchain")},
			"ibm_cd_toolchain_tool_appconfig":          {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolAppconfig")},
			"ibm_cd_toolchain_tool_artifactory":        {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolArtifactory")},
			"ibm_cd_toolchain_tool_bitbucketgit":       {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolBitbucketgit")},
			"ibm_cd_toolchain_tool_custom":             {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolCustom")},
			"ibm_cd_toolchain_tool_devopsinsights":     {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolDevopsinsights")},
			"ibm_cd_toolchain_tool_githubconsolidated": {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolGithubconsolidated")},
			"ibm_cd_toolchain_tool_githubintegrated":   {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolGithubintegrated")},
			"ibm_cd_toolchain_tool_gitlab":             {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolGitlab")},
			"ibm_cd_toolchain_tool_hashicorpvault":     {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolHashicorpvault")},
			"ibm_cd_toolchain_tool_hostedgit":          {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolHostedgit")},
			"ibm_cd_toolchain_tool_jenkins":            {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolJenkins")},
			"ibm_cd_toolchain_tool_keyprotect":         {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolKeyprotect")},
			"ibm_cd_toolchain_tool_nexus":              {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolNexus")},
			"ibm_cd_toolchain_tool_pagerduty":          {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolPagerduty")},
			"ibm_cd_toolchain_tool_pipeline":           {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolPipeline")},
			"ibm_cd_toolchain_tool_privateworker":      {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolPrivateworker")},
			"ibm_cd_toolchain_tool_saucelabs":          {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolSaucelabs")},
			"ibm_cd_toolchain_tool_secretsmanager":     {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolSecretsmanager")},
			"ibm_cd_toolchain_tool_securitycompliance": {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolSecuritycompliance")},
			"ibm_cd_toolchain_tool_slack":              {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolSlack")},
			"ibm_cd_toolchain_tool_sonarqube":          {Tok: tfbridge.MakeResource(mainPkg, "cdToolchain", "CdToolchainToolSonarqube")},
			"ibm_cdn":                                  {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "Cdn")},
			"ibm_certificate_manager_import":           {Tok: tfbridge.MakeResource(mainPkg, "certificateManager", "CertificateManagerImport")},
			"ibm_certificate_manager_order":            {Tok: tfbridge.MakeResource(mainPkg, "certificateManager", "CertificateManagerOrder")},
			"ibm_cis":                                  {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "Cis")},
			"ibm_cis_alert":                            {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisAlert")},
			"ibm_cis_cache_settings":                   {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisCacheSettings")},
			"ibm_cis_certificate_order":                {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisCertificateOrder")},
			"ibm_cis_certificate_upload":               {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisCertificateUpload")},
			"ibm_cis_custom_page":                      {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisCustomPage")},
			"ibm_cis_dns_record":                       {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisDnsRecord")},
			"ibm_cis_dns_records_import":               {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisDnsRecordsImport")},
			"ibm_cis_domain":                           {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisDomain")},
			"ibm_cis_domain_settings":                  {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisDomainSettings")},
			"ibm_cis_edge_functions_action":            {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisEdgeFunctionsAction")},
			"ibm_cis_edge_functions_trigger":           {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisEdgeFunctionsTrigger")},
			"ibm_cis_filter":                           {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisFilter")},
			"ibm_cis_firewall":                         {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisFirewall")},
			"ibm_cis_firewall_rule": {
				Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisFirewallRule"),
				Docs: &tfbridge.DocInfo{
					Source: "cis_firewall_rules.html.markdown",
				}},
			"ibm_cis_global_load_balancer": {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisGlobalLoadBalancer")},
			"ibm_cis_healthcheck":          {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisHealthcheck")},
			"ibm_cis_logpush_job": {
				Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisLogpushJob"),
				Docs: &tfbridge.DocInfo{
					Source: "cis_logpush_jobs.html.markdown",
				},
			},
			"ibm_cis_mtls":                      {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisMtls")},
			"ibm_cis_mtls_app":                  {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisMtlsApp")},
			"ibm_cis_origin_auth":               {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisOriginAuth")},
			"ibm_cis_origin_pool":               {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisOriginPool")},
			"ibm_cis_page_rule":                 {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisPageRule")},
			"ibm_cis_range_app":                 {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisRangeApp")},
			"ibm_cis_rate_limit":                {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisRateLimit")},
			"ibm_cis_routing":                   {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisRouting")},
			"ibm_cis_tls_settings":              {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisTlsSettings")},
			"ibm_cis_waf_group":                 {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisWafGroup")},
			"ibm_cis_waf_package":               {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisWafPackage")},
			"ibm_cis_waf_rule":                  {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisWafRule")},
			"ibm_cis_webhook":                   {Tok: tfbridge.MakeResource(mainPkg, "internetServices", "CisWebhook")},
			"ibm_cloud_shell_account_settings":  {Tok: tfbridge.MakeResource(mainPkg, "cloudShell", "CloudShellAccountSettings")},
			"ibm_cloudant":                      {Tok: tfbridge.MakeResource(mainPkg, "CloudantDatabases", "Cloudant")},
			"ibm_cloudant_database":             {Tok: tfbridge.MakeResource(mainPkg, "CloudantDatabases", "CloudantDatabase")},
			"ibm_cm_catalog":                    {Tok: tfbridge.MakeResource(mainPkg, "catalogManagement", "CmCatalog")},
			"ibm_cm_offering":                   {Tok: tfbridge.MakeResource(mainPkg, "catalogManagement", "CmOffering")},
			"ibm_cm_offering_instance":          {Tok: tfbridge.MakeResource(mainPkg, "catalogManagement", "CmOfferingInstance")},
			"ibm_cm_version":                    {Tok: tfbridge.MakeResource(mainPkg, "catalogManagement", "CmVersion")},
			"ibm_compute_autoscale_group":       {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeAutoscaleGroup")},
			"ibm_compute_autoscale_policy":      {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeAutoscalePolicy")},
			"ibm_compute_bare_metal":            {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeBareMetal")},
			"ibm_compute_dedicated_host":        {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeDedicatedHost")},
			"ibm_compute_monitor":               {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeMonitor")},
			"ibm_compute_placement_group":       {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputePlacementGroup")},
			"ibm_compute_provisioning_hook":     {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeProvisioningHook")},
			"ibm_compute_reserved_capacity":     {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeReservedCapacity")},
			"ibm_compute_ssh_key":               {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeSshKey")},
			"ibm_compute_ssl_certificate":       {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeSslCertificate")},
			"ibm_compute_user":                  {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeUser")},
			"ibm_compute_vm_instance":           {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ComputeVmInstance")},
			"ibm_container_addons":              {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerAddons")},
			"ibm_container_alb":                 {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerAlb")},
			"ibm_container_alb_cert":            {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerAlbCert")},
			"ibm_container_alb_create":          {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerAlbCreate")},
			"ibm_container_api_key_reset":       {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerApiKeyReset")},
			"ibm_container_bind_service":        {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerBindService")},
			"ibm_container_cluster":             {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerCluster")},
			"ibm_container_cluster_feature":     {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerClusterFeature")},
			"ibm_container_dedicated_host":      {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerDedicatedHost")},
			"ibm_container_dedicated_host_pool": {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerDedicatedHostPool")},
			"ibm_container_nlb_dns":             {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerNlbDns")},
			"ibm_container_storage_attachment":  {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerStorageAttachment")},
			"ibm_container_vpc_alb":             {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerVpcAlb")},
			"ibm_container_vpc_alb_create":      {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerVpcAlbCreate")},
			"ibm_container_vpc_cluster":         {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerVpcCluster")},
			//"ibm_container_vpc_worker_pool":             {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerVpcWorkerPool")},
			//"ibm_container_worker_pool":                 {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerWorkerPool")},
			"ibm_container_worker_pool_zone_attachment": {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ContainerWorkerPoolZoneAttachment")},
			"ibm_cos_bucket":                          {Tok: tfbridge.MakeResource(mainPkg, "objectStorage", "CosBucket")},
			"ibm_cos_bucket_object":                   {Tok: tfbridge.MakeResource(mainPkg, "objectStorage", "CosBucketObject")},
			"ibm_cos_bucket_replication_rule":         {Tok: tfbridge.MakeResource(mainPkg, "objectStorage", "CosBucketReplicationRule")},
			"ibm_cr_namespace":                        {Tok: tfbridge.MakeResource(mainPkg, "containerRegistry", "CrNamespace")},
			"ibm_cr_retention_policy":                 {Tok: tfbridge.MakeResource(mainPkg, "containerRegistry", "CrRetentionPolicy")},
			"ibm_database":                            {Tok: tfbridge.MakeResource(mainPkg, "cloudDatabases", "Database")},
			"ibm_dl_gateway":                          {Tok: tfbridge.MakeResource(mainPkg, "directLinkGateway", "DlGateway")},
			"ibm_dl_provider_gateway":                 {Tok: tfbridge.MakeResource(mainPkg, "directLinkGateway", "DlProviderGateway")},
			"ibm_dl_virtual_connection":               {Tok: tfbridge.MakeResource(mainPkg, "directLinkGateway", "DlVirtualConnection")},
			"ibm_dns_custom_resolver":                 {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsCustomResolver")},
			"ibm_dns_custom_resolver_forwarding_rule": {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsCustomResolverForwardingRule")},
			"ibm_dns_custom_resolver_location":        {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsCustomResolverLocation")},
			"ibm_dns_custom_resolver_secondary_zone":  {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsCustomResolverSecondaryZone")},
			"ibm_dns_domain":                          {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "DnsDomain")},
			"ibm_dns_domain_registration_nameservers": {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "DnsDomainRegistrationNameservers")},
			"ibm_dns_glb":                             {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsGlb")},
			"ibm_dns_glb_monitor":                     {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsGlbMonitor")},
			"ibm_dns_glb_pool":                        {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsGlbPool")},
			"ibm_dns_permitted_network":               {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsPermittedNetwork")},
			"ibm_dns_record":                          {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsRecord")},
			"ibm_dns_resource_record":                 {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsResourceRecord")},
			"ibm_dns_reverse_record":                  {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsReverseRecord")},
			"ibm_dns_secondary":                       {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsSecondary")},
			"ibm_dns_zone":                            {Tok: tfbridge.MakeResource(mainPkg, "dnsService", "DnsZone")},
			"ibm_en_destination":                      {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestination")},
			"ibm_en_destination_android":              {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationAndroid")},
			"ibm_en_destination_chrome":               {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationChrome")},
			"ibm_en_destination_firefox":              {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationFirefox")},
			"ibm_en_destination_ios":                  {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationIos")},
			"ibm_en_destination_safari":               {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationSafari")},
			"ibm_en_destination_slack":                {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationSlack")},
			"ibm_en_destination_webhook":              {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnDestinationWebhook")},
			"ibm_en_source":                           {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSource")},
			"ibm_en_subscription":                     {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscription")},
			"ibm_en_subscription_android":             {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionAndroid")},
			"ibm_en_subscription_chrome":              {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionChrome")},
			"ibm_en_subscription_email":               {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionEmail")},
			"ibm_en_subscription_firefox":             {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionFirefox")},
			"ibm_en_subscription_ios":                 {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionIos")},
			"ibm_en_subscription_safari":              {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionSafari")},
			"ibm_en_subscription_slack":               {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionSlack")},
			"ibm_en_subscription_sms":                 {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionSms")},
			"ibm_en_subscription_webhook":             {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnSubscriptionWebhook")},
			"ibm_en_topic":                            {Tok: tfbridge.MakeResource(mainPkg, "eventNotifications", "EnTopic")},
			"ibm_enterprise":                          {Tok: tfbridge.MakeResource(mainPkg, "enterpriseManagement", "Enterprise")},
			"ibm_enterprise_account":                  {Tok: tfbridge.MakeResource(mainPkg, "enterpriseManagement", "EnterpriseAccount")},
			"ibm_enterprise_account_group":            {Tok: tfbridge.MakeResource(mainPkg, "enterpriseManagement", "EnterpriseAccountGroup")},
			"ibm_event_streams_schema":                {Tok: tfbridge.MakeResource(mainPkg, "eventStreams", "EventStreamsSchema")},
			"ibm_event_streams_topic":                 {Tok: tfbridge.MakeResource(mainPkg, "eventStreams", "EventStreamsTopic")},
			"ibm_firewall":                            {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "Firewall")},
			"ibm_firewall_policy":                     {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "FirewallPolicy")},
			"ibm_function_action":                     {Tok: tfbridge.MakeResource(mainPkg, "functions", "FunctionAction")},
			"ibm_function_namespace":                  {Tok: tfbridge.MakeResource(mainPkg, "functions", "FunctionNamespace")},
			"ibm_function_package":                    {Tok: tfbridge.MakeResource(mainPkg, "functions", "FunctionPackage")},
			"ibm_function_rule":                       {Tok: tfbridge.MakeResource(mainPkg, "functions", "FunctionRule")},
			"ibm_function_trigger":                    {Tok: tfbridge.MakeResource(mainPkg, "functions", "FunctionTrigger")},
			"ibm_hardware_firewall_shared":            {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "HardwareFirewallShared")},
			"ibm_hpcs":                                {Tok: tfbridge.MakeResource(mainPkg, "hyperProtectCryptoServices", "Hpcs")},
			"ibm_hpcs_key_template":                   {Tok: tfbridge.MakeResource(mainPkg, "hyperProtectCryptoServices", "HpcsKeyTemplate")},
			"ibm_hpcs_keystore":                       {Tok: tfbridge.MakeResource(mainPkg, "hyperProtectCryptoServices", "HpcsKeystore")},
			"ibm_hpcs_managed_key":                    {Tok: tfbridge.MakeResource(mainPkg, "hyperProtectCryptoServices", "HpcsManagedKey")},
			"ibm_hpcs_vault":                          {Tok: tfbridge.MakeResource(mainPkg, "hyperProtectCryptoServices", "HpcsVault")},
			"ibm_iam_access_group":                    {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAccessGroup")},
			"ibm_iam_access_group_dynamic_rule":       {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAccessGroupDynamicRule")},
			"ibm_iam_access_group_members":            {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAccessGroupMembers")},
			"ibm_iam_access_group_policy":             {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAccessGroupPolicy")},
			"ibm_iam_account_settings":                {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAccountSettings")},
			"ibm_iam_api_key":                         {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamApiKey")},
			"ibm_iam_authorization_policy":            {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAuthorizationPolicy")},
			"ibm_iam_authorization_policy_detach":     {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamAuthorizationPolicyDetach")},
			"ibm_iam_custom_role":                     {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamCustomRole")},
			"ibm_iam_service_api_key":                 {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamServiceApiKey")},
			"ibm_iam_service_id":                      {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamServiceId")},
			"ibm_iam_service_policy":                  {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamServicePolicy")},
			"ibm_iam_trusted_profile":                 {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamTrustedProfile")},
			"ibm_iam_trusted_profile_claim_rule":      {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamTrustedProfileClaimRule")},
			"ibm_iam_trusted_profile_link":            {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamTrustedProfileLink")},
			"ibm_iam_trusted_profile_policy":          {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamTrustedProfilePolicy")},
			"ibm_iam_user_invite":                     {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamUserInvite")},
			"ibm_iam_user_policy":                     {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamUserPolicy")},
			"ibm_iam_user_settings":                   {Tok: tfbridge.MakeResource(mainPkg, "iam", "IamUserSettings")},
			"ibm_ipsec_vpn":                           {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "IpsecVpn")},
			"ibm_is_bare_metal_server":                {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBareMetalServer")},
			"ibm_is_backup_policy":                    {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBackupPolicy")},
			"ibm_is_backup_policy_plan":               {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBackupPolicyPlan")},
			"ibm_is_bare_metal_server_action":         {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBareMetalServerAction")},
			"ibm_is_bare_metal_server_disk":           {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBareMetalServerDisk")},
			//"ibm_is_bare_metal_server_network_interface": {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBareMetalServerNetworkInterface")},
			// Interestingly you can't set these arguments in the resource above ^
			//"ibm_is_bare_metal_server_network_interface_allow_float": {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBareMetalServerNetworkInterfaceAllowFloat")},
			//"ibm_is_bare_metal_server_network_interface_floating_ip": {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsBareMetalServerNetworkInterfaceFloatingIp")},
			"ibm_is_dedicated_host":                 {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsDedicatedHost")},
			"ibm_is_dedicated_host_disk_management": {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsDedicatedHostDiskManagement")},
			"ibm_is_dedicated_host_group":           {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsDedicatedHostGroup")},
			"ibm_is_floating_ip":                    {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsFloatingIp")},
			"ibm_is_flow_log":                       {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsFlowLog")},
			"ibm_is_ike_policy":                     {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsIkePolicy")},
			"ibm_is_image":                          {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsImage")},
			"ibm_is_instance":                       {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstance")},
			"ibm_is_instance_action":                {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceAction")},
			"ibm_is_instance_disk_management":       {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceDiskManagement")},
			"ibm_is_instance_group":                 {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceGroup")},
			"ibm_is_instance_group_manager":         {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceGroupManager")},
			"ibm_is_instance_group_manager_action":  {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceGroupManagerAction")},
			"ibm_is_instance_group_manager_policy":  {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceGroupManagerPolicy")},
			"ibm_is_instance_group_membership":      {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceGroupMembership")},
			//"ibm_is_instance_network_interface":     {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceNetworkInterface")},
			"ibm_is_instance_template":          {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceTemplate")},
			"ibm_is_instance_volume_attachment": {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsInstanceVolumeAttachment")},
			"ibm_is_ipsec_policy":               {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsIpsecPolicy")},
			"ibm_is_lb":                         {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsLb")},
			"ibm_is_lb_listener":                {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsLbListener")},
			"ibm_is_lb_listener_policy":         {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsLbListenerPolicy")},
			"ibm_is_lb_listener_policy_rule":    {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsLbListenerPolicyRule")},
			"ibm_is_lb_pool":                    {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsLbPool")},
			// "ibm_is_lb_pool_member":                              {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsLbPoolMember")},
			"ibm_is_network_acl":                                 {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsNetworkAcl")},
			"ibm_is_network_acl_rule":                            {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsNetworkAclRule")},
			"ibm_is_placement_group":                             {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsPlacementGroup")},
			"ibm_is_public_gateway":                              {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsPublicGateway")},
			"ibm_is_security_group":                              {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSecurityGroup")},
			"ibm_is_security_group_network_interface_attachment": {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSecurityGroupNetworkInterfaceAttachment")},
			"ibm_is_security_group_rule":                         {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSecurityGroupRule")},
			"ibm_is_security_group_target":                       {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSecurityGroupTarget")},
			"ibm_is_snapshot":                                    {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSnapshot")},
			"ibm_is_ssh_key":                                     {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSshKey")},
			"ibm_is_subnet":                                      {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSubnet")},
			"ibm_is_subnet_network_acl_attachment":               {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSubnetNetworkAclAttachment")},
			"ibm_is_subnet_public_gateway_attachment":            {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSubnetPublicGatewayAttachment")},
			"ibm_is_subnet_reserved_ip":                          {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSubnetReservedIp")},
			"ibm_is_subnet_routing_table_attachment":             {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsSubnetRoutingTableAttachment")},
			"ibm_is_virtual_endpoint_gateway":                    {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVirtualEndpointGateway")},
			"ibm_is_virtual_endpoint_gateway_ip":                 {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVirtualEndpointGatewayIp")},
			"ibm_is_volume":                                      {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVolume")},
			"ibm_is_vpc":                                         {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpc")},
			"ibm_is_vpc_address_prefix":                          {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpcAddressPrefix")},
			"ibm_is_vpc_route":                                   {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpcRoute")},
			"ibm_is_vpc_routing_table":                           {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpcRoutingTable")},
			"ibm_is_vpc_routing_table_route":                     {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpcRoutingTableRoute")},
			"ibm_is_vpn_gateway":                                 {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpnGateway")},
			"ibm_is_vpn_gateway_connection":                      {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpnGatewayConnection")},
			"ibm_is_vpn_server":                                  {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpnServer")},
			"ibm_is_vpn_server_client":                           {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpnServerClient")},
			"ibm_is_vpn_server_route":                            {Tok: tfbridge.MakeResource(mainPkg, "vpcInfrastructure", "IsVpnServerRoute")},
			"ibm_kms_key":                                        {Tok: tfbridge.MakeResource(mainPkg, "keyManagementService", "KmsKey")},
			"ibm_kms_key_alias":                                  {Tok: tfbridge.MakeResource(mainPkg, "keyManagementService", "KmsKeyAlias")},
			"ibm_kms_key_policies":                               {Tok: tfbridge.MakeResource(mainPkg, "keyManagementService", "KmsKeyPolicies")},
			"ibm_kms_key_rings":                                  {Tok: tfbridge.MakeResource(mainPkg, "keyManagementService", "KmsKeyRings")},
			"ibm_kp_key":                                         {Tok: tfbridge.MakeResource(mainPkg, "keyManagementService", "KpKey")},
			"ibm_lb":                                             {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "Lb")},
			"ibm_lb_service":                                     {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbService")},
			"ibm_lb_service_group":                               {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbServiceGroup")},
			"ibm_lb_vpx":                                         {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbVpx")},
			"ibm_lb_vpx_ha":                                      {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbVpxHa")},
			"ibm_lb_vpx_service":                                 {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbVpxService")},
			"ibm_lb_vpx_vip":                                     {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbVpxVip")},
			"ibm_lbaas":                                          {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "Lbaas")},
			"ibm_lbaas_health_monitor":                           {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbaasHealthMonitor")},
			"ibm_lbaas_server_instance_attachment":               {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "LbaasServerInstanceAttachment")},
			"ibm_multi_vlan_firewall":                            {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "MultiVlanFirewall")},
			"ibm_network_gateway":                                {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "NetworkGateway")},
			"ibm_network_gateway_vlan_association":               {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "NetworkGatewayVlanAssociation")},
			"ibm_network_interface_sg_attachment":                {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "NetworkInterfaceSgAttachment")},
			"ibm_network_public_ip":                              {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "NetworkPublicIp")},
			"ibm_network_vlan":                                   {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "NetworkVlan")},
			"ibm_network_vlan_spanning":                          {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "NetworkVlanSpanning")},
			"ibm_ob_logging":                                     {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ObLogging")},
			"ibm_ob_monitoring":                                  {Tok: tfbridge.MakeResource(mainPkg, "kubernetesService", "ObMonitoring")},
			"ibm_object_storage_account":                         {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "ObjectStorageAccount")},
			"ibm_org":                                            {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "Org")},
			"ibm_pi_capture":                                     {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiCapture")},
			"ibm_pi_cloud_connection":                            {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiCloudConnection")},
			"ibm_pi_cloud_connection_network_attach":             {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiCloudConnectionNetworkAttach")},
			"ibm_pi_console_language":                            {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiConsoleLanguage")},
			"ibm_pi_dhcp":                                        {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiDhcp")},
			"ibm_pi_ike_policy": {
				Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiIkePolicy"),
				Docs: &tfbridge.DocInfo{
					Source: "pi_vpn_ike_policy.html.markdown",
				},
			},
			"ibm_pi_image":        {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiImage")},
			"ibm_pi_image_export": {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiImageExport")},
			"ibm_pi_instance":     {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiInstance")},
			"ibm_pi_ipsec_policy": {
				Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiIpsecPolicy"),
				Docs: &tfbridge.DocInfo{
					Source: "pi_vpn_ipsec_policy.html.markdown",
				},
			},
			"ibm_pi_key":                                        {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiKey")},
			"ibm_pi_network":                                    {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiNetwork")},
			"ibm_pi_network_port":                               {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiNetworkPort")},
			"ibm_pi_network_port_attach":                        {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiNetworkPortAttach")},
			"ibm_pi_operations":                                 {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiOperations")},
			"ibm_pi_placement_group":                            {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiPlacementGroup")},
			"ibm_pi_snapshot":                                   {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiSnapshot")},
			"ibm_pi_volume":                                     {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiVolume")},
			"ibm_pi_volume_attach":                              {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiVolumeAttach")},
			"ibm_pi_vpn_connection":                             {Tok: tfbridge.MakeResource(mainPkg, "powerSystems", "PiVpnConnection")},
			"ibm_pn_application_chrome":                         {Tok: tfbridge.MakeResource(mainPkg, "pushNotifications", "PnApplicationChrome")},
			"ibm_resource_group":                                {Tok: tfbridge.MakeResource(mainPkg, "resourceManagement", "ResourceGroup")},
			"ibm_resource_instance":                             {Tok: tfbridge.MakeResource(mainPkg, "resourceManagement", "ResourceInstance")},
			"ibm_resource_key":                                  {Tok: tfbridge.MakeResource(mainPkg, "resourceManagement", "ResourceKey")},
			"ibm_resource_tag":                                  {Tok: tfbridge.MakeResource(mainPkg, "globalTagging", "ResourceTag")},
			"ibm_satellite_cluster":                             {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteCluster")},
			"ibm_satellite_cluster_worker_pool":                 {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteClusterWorkerPool")},
			"ibm_satellite_cluster_worker_pool_zone_attachment": {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteClusterWorkerPoolZoneAttachment")},
			"ibm_satellite_endpoint":                            {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteEndpoint")},
			"ibm_satellite_host":                                {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteHost")},
			"ibm_satellite_link":                                {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteLink")},
			"ibm_satellite_location":                            {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteLocation")},
			"ibm_satellite_location_nlb_dns":                    {Tok: tfbridge.MakeResource(mainPkg, "satellite", "SatelliteLocationNlbDns")},
			"ibm_scc_account_settings":                          {Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccAccountSettings")},
			"ibm_scc_posture_collector":                         {Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccPostureCollector")},
			"ibm_scc_posture_credential":                        {Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccPostureCredential")},
			"ibm_scc_posture_scope":                             {Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccPostureScope")},
			"ibm_scc_rule": {
				Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccRule"),
				Docs: &tfbridge.DocInfo{
					Source: "scc_configuration_rule.html.markdown",
				},
			},
			"ibm_scc_rule_attachment": {
				Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccRuleAttachment"),
				Docs: &tfbridge.DocInfo{
					Source: "scc_configuration_rule_attachment.html.markdown",
				},
			},
			"ibm_scc_si_note":       {Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccSiNote")},
			"ibm_scc_si_occurrence": {Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccSiOccurrence")},
			"ibm_scc_template": {
				Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccTemplate"),
				Docs: &tfbridge.DocInfo{
					Source: "scc_configuration_template.html.markdown",
				},
			},
			"ibm_scc_template_attachment": {
				Tok: tfbridge.MakeResource(mainPkg, "securityComplianceCenter", "SccTemplateAttachment"),
				Docs: &tfbridge.DocInfo{
					Source: "scc_configuration_template_attachment.html.markdown",
				},
			},
			"ibm_schematics_action":           {Tok: tfbridge.MakeResource(mainPkg, "schematics", "SchematicsAction")},
			"ibm_schematics_inventory":        {Tok: tfbridge.MakeResource(mainPkg, "schematics", "SchematicsInventory")},
			"ibm_schematics_job":              {Tok: tfbridge.MakeResource(mainPkg, "schematics", "SchematicsJob")},
			"ibm_schematics_resource_query":   {Tok: tfbridge.MakeResource(mainPkg, "schematics", "SchematicsResourceQuery")},
			"ibm_schematics_workspace":        {Tok: tfbridge.MakeResource(mainPkg, "schematics", "SchematicsWorkspace")},
			"ibm_security_group":              {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "SecurityGroup")},
			"ibm_security_group_rule":         {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "SecurityGroupRule")},
			"ibm_service_instance":            {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "ServiceInstance")},
			"ibm_service_key":                 {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "ServiceKey")},
			"ibm_space":                       {Tok: tfbridge.MakeResource(mainPkg, "cloudFoundry", "Space")},
			"ibm_ssl_certificate":             {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "SslCertificate")},
			"ibm_storage_block":               {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "StorageBlock")},
			"ibm_storage_evault":              {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "StorageEvault")},
			"ibm_storage_file":                {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "StorageFile")},
			"ibm_subnet":                      {Tok: tfbridge.MakeResource(mainPkg, "classicInfrastructure", "Subnet")},
			"ibm_tg_connection":               {Tok: tfbridge.MakeResource(mainPkg, "transitGateway", "TgConnection")},
			"ibm_tg_connection_prefix_filter": {Tok: tfbridge.MakeResource(mainPkg, "transitGateway", "TgConnectionPrefixFilter")},
			"ibm_tg_gateway":                  {Tok: tfbridge.MakeResource(mainPkg, "transitGateway", "TgGateway")},
			"ibm_tg_route_report":             {Tok: tfbridge.MakeResource(mainPkg, "transitGateway", "TgRouteReport")},
		},
		DataSources: map[string]*tfbridge.DataSourceInfo{
			"ibm_account":                              {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getAccount")},
			"ibm_api_gateway":                          {Tok: tfbridge.MakeDataSource(mainPkg, "apiGateway", "getApiGateway")},
			"ibm_app":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getApp")},
			"ibm_app_config_environment":               {Tok: tfbridge.MakeDataSource(mainPkg, "appConfiguration", "getAppConfigEnvironment")},
			"ibm_app_config_environments":              {Tok: tfbridge.MakeDataSource(mainPkg, "appConfiguration", "getAppConfigEnvironments")},
			"ibm_app_config_feature":                   {Tok: tfbridge.MakeDataSource(mainPkg, "appConfiguration", "getAppConfigFeature")},
			"ibm_app_config_features":                  {Tok: tfbridge.MakeDataSource(mainPkg, "appConfiguration", "getAppConfigFeatures")},
			"ibm_app_domain_private":                   {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getAppDomainPrivate")},
			"ibm_app_domain_shared":                    {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getAppDomainShared")},
			"ibm_app_route":                            {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getAppRoute")},
			"ibm_appid_action_url":                     {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidActionUrl")},
			"ibm_appid_apm":                            {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidApm")},
			"ibm_appid_application":                    {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidApplication")},
			"ibm_appid_application_roles":              {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidApplicationRoles")},
			"ibm_appid_application_scopes":             {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidApplicationScopes")},
			"ibm_appid_applications":                   {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidApplications")},
			"ibm_appid_audit_status":                   {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidAuditStatus")},
			"ibm_appid_cloud_directory_template":       {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidCloudDirectoryTemplate")},
			"ibm_appid_cloud_directory_user":           {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidCloudDirectoryUser")},
			"ibm_appid_idp_cloud_directory":            {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidIdpCloudDirectory")},
			"ibm_appid_idp_custom":                     {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidIdpCustom")},
			"ibm_appid_idp_facebook":                   {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidIdpFacebook")},
			"ibm_appid_idp_google":                     {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidIdpGoogle")},
			"ibm_appid_idp_saml":                       {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidIdpSaml")},
			"ibm_appid_idp_saml_metadata":              {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidIdpSamlMetadata")},
			"ibm_appid_languages":                      {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidLanguages")},
			"ibm_appid_mfa":                            {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidMfa")},
			"ibm_appid_mfa_channel":                    {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidMfaChannel")},
			"ibm_appid_password_regex":                 {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidPasswordRegex")},
			"ibm_appid_redirect_urls":                  {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidRedirectUrls")},
			"ibm_appid_role":                           {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidRole")},
			"ibm_appid_roles":                          {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidRoles")},
			"ibm_appid_theme_color":                    {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidThemeColor")},
			"ibm_appid_theme_text":                     {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidThemeText")},
			"ibm_appid_token_config":                   {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidTokenConfig")},
			"ibm_appid_user_roles":                     {Tok: tfbridge.MakeDataSource(mainPkg, "appIdManagement", "getAppidUserRoles")},
			"ibm_atracker_endpoints":                   {Tok: tfbridge.MakeDataSource(mainPkg, "activityTracker", "getAtrackerEndpoints")},
			"ibm_atracker_routes":                      {Tok: tfbridge.MakeDataSource(mainPkg, "activityTracker", "getAtrackerRoutes")},
			"ibm_atracker_targets":                     {Tok: tfbridge.MakeDataSource(mainPkg, "activityTracker", "getAtrackerTargets")},
			"ibm_cbr_rule":                             {Tok: tfbridge.MakeDataSource(mainPkg, "contextBasedRestrictions", "getCbrRule")},
			"ibm_cbr_zone":                             {Tok: tfbridge.MakeDataSource(mainPkg, "contextBasedRestrictions", "getCbrZone")},
			"ibm_cd_tekton_pipeline":                   {Tok: tfbridge.MakeDataSource(mainPkg, "cdTekton", "getCdTektonPipeline")},
			"ibm_cd_tekton_pipeline_definition":        {Tok: tfbridge.MakeDataSource(mainPkg, "cdTekton", "getCdTektonPipelineDefinition")},
			"ibm_cd_tekton_pipeline_property":          {Tok: tfbridge.MakeDataSource(mainPkg, "cdTekton", "getCdTektonPipelineProperty")},
			"ibm_cd_tekton_pipeline_trigger":           {Tok: tfbridge.MakeDataSource(mainPkg, "cdTekton", "getCdTektonPipelineTrigger")},
			"ibm_cd_tekton_pipeline_trigger_property":  {Tok: tfbridge.MakeDataSource(mainPkg, "cdTekton", "getCdTektonPipelineTriggerProperty")},
			"ibm_cd_toolchain":                         {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchain")},
			"ibm_cd_toolchain_tool_appconfig":          {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolAppconfig")},
			"ibm_cd_toolchain_tool_artifactory":        {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolArtifactory")},
			"ibm_cd_toolchain_tool_bitbucketgit":       {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolBitbucketgit")},
			"ibm_cd_toolchain_tool_custom":             {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolCustom")},
			"ibm_cd_toolchain_tool_devopsinsights":     {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolDevopsinsights")},
			"ibm_cd_toolchain_tool_githubconsolidated": {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolGithubconsolidated")},
			"ibm_cd_toolchain_tool_githubintegrated":   {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolGithubintegrated")},
			"ibm_cd_toolchain_tool_gitlab":             {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolGitlab")},
			"ibm_cd_toolchain_tool_hashicorpvault":     {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolHashicorpvault")},
			"ibm_cd_toolchain_tool_hostedgit":          {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolHostedgit")},
			"ibm_cd_toolchain_tool_jenkins":            {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolJenkins")},
			"ibm_cd_toolchain_tool_keyprotect":         {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolKeyprotect")},
			"ibm_cd_toolchain_tool_nexus":              {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolNexus")},
			"ibm_cd_toolchain_tool_pagerduty":          {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolPagerduty")},
			"ibm_cd_toolchain_tool_pipeline":           {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolPipeline")},
			"ibm_cd_toolchain_tool_privateworker":      {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolPrivateworker")},
			"ibm_cd_toolchain_tool_saucelabs":          {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolSaucelabs")},
			"ibm_cd_toolchain_tool_secretsmanager":     {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolSecretsmanager")},
			"ibm_cd_toolchain_tool_securitycompliance": {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolSecuritycompliance")},
			"ibm_cd_toolchain_tool_slack":              {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolSlack")},
			"ibm_cd_toolchain_tool_sonarqube":          {Tok: tfbridge.MakeDataSource(mainPkg, "cdToolchain", "getCdToolchainToolSonarqube")},
			"ibm_certificate_manager_certificate":      {Tok: tfbridge.MakeDataSource(mainPkg, "certificateManager", "getCertificateManagerCertificate")},
			"ibm_certificate_manager_certificates":     {Tok: tfbridge.MakeDataSource(mainPkg, "certificateManager", "getCertificateManagerCertificates")},
			"ibm_cis":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCis")},
			"ibm_cis_alerts":                           {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisAlerts")},
			"ibm_cis_cache_settings":                   {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisCacheSettings")},
			"ibm_cis_certificates":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisCertificates")},
			"ibm_cis_custom_certificates":              {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisCustomCertificates")},
			"ibm_cis_custom_pages":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisCustomPages")},
			"ibm_cis_dns_records":                      {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisDnsRecords")},
			"ibm_cis_domain":                           {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisDomain")},
			"ibm_cis_edge_functions_actions":           {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisEdgeFunctionsActions")},
			"ibm_cis_edge_functions_triggers":          {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisEdgeFunctionsTriggers")},
			"ibm_cis_filters":                          {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisFilters")},
			"ibm_cis_firewall":                         {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisFirewall")},
			"ibm_cis_firewall_rules":                   {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisFirewallRules")},
			"ibm_cis_global_load_balancers":            {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisGlobalLoadBalancers")},
			"ibm_cis_healthchecks":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisHealthchecks")},
			"ibm_cis_ip_addresses":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisIpAddresses")},
			"ibm_cis_logpush_jobs":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisLogpushJobs")},
			"ibm_cis_mtls_apps":                        {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisMtlsApps")},
			"ibm_cis_mtlss":                            {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisMtlss")},
			"ibm_cis_origin_auths":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisOriginAuths")},
			"ibm_cis_origin_pools":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisOriginPools")},
			"ibm_cis_page_rules":                       {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisPageRules")},
			"ibm_cis_range_apps":                       {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisRangeApps")},
			"ibm_cis_rate_limit":                       {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisRateLimit")},
			"ibm_cis_waf_groups":                       {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisWafGroups")},
			"ibm_cis_waf_packages":                     {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisWafPackages")},
			"ibm_cis_waf_rules":                        {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisWafRules")},
			"ibm_cis_webhooks":                         {Tok: tfbridge.MakeDataSource(mainPkg, "internetServices", "getCisWebhooks")},
			"ibm_cloud_shell_account_settings":         {Tok: tfbridge.MakeDataSource(mainPkg, "cloudShell", "getCloudShellAccountSettings")},
			"ibm_cloudant":                             {Tok: tfbridge.MakeDataSource(mainPkg, "CloudantDatabases", "getCloudant")},
			"ibm_cloudant_database":                    {Tok: tfbridge.MakeDataSource(mainPkg, "CloudantDatabases", "getCloudantDatabase")},
			"ibm_cm_catalog":                           {Tok: tfbridge.MakeDataSource(mainPkg, "catalogManagement", "getCmCatalog")},
			"ibm_cm_offering":                          {Tok: tfbridge.MakeDataSource(mainPkg, "catalogManagement", "getCmOffering")},
			"ibm_cm_offering_instance":                 {Tok: tfbridge.MakeDataSource(mainPkg, "catalogManagement", "getCmOfferingInstance")},
			"ibm_cm_version":                           {Tok: tfbridge.MakeDataSource(mainPkg, "catalogManagement", "getCmVersion")},
			"ibm_compute_bare_metal":                   {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getComputeBareMetal")},
			"ibm_compute_image_template":               {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getComputeImageTemplate")},
			"ibm_compute_placement_group":              {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getComputePlacementGroup")},
			"ibm_compute_reserved_capacity":            {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getComputeReservedCapacity")},
			"ibm_compute_ssh_key":                      {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getComputeSshKey")},
			"ibm_compute_vm_instance":                  {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getComputeVmInstance")},
			"ibm_container_addons":                     {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerAddons")},
			"ibm_container_alb":                        {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerAlb")},
			"ibm_container_alb_cert":                   {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerAlbCert")},
			"ibm_container_bind_service":               {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerBindService")},
			"ibm_container_cluster":                    {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerCluster")},
			"ibm_container_cluster_config":             {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerClusterConfig")},
			"ibm_container_cluster_versions":           {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerClusterVersions")},
			"ibm_container_cluster_worker":             {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerClusterWorker")},
			"ibm_container_dedicated_host":             {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerDedicatedHost")},
			"ibm_container_dedicated_host_flavor":      {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerDedicatedHostFlavor")},
			"ibm_container_dedicated_host_flavors":     {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerDedicatedHostFlavors")},
			"ibm_container_dedicated_host_pool":        {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerDedicatedHostPool")},
			"ibm_container_nlb_dns":                    {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerNlbDns")},
			"ibm_container_storage_attachment":         {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerStorageAttachment")},
			"ibm_container_vpc_alb":                    {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerVpcAlb")},
			"ibm_container_vpc_cluster":                {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerVpcCluster")},
			"ibm_container_vpc_cluster_alb":            {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerVpcClusterAlb")},
			"ibm_container_vpc_cluster_worker":         {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerVpcClusterWorker")},
			//"ibm_container_vpc_cluster_worker_pool":    {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerVpcClusterWorkerPool")},
			// - this is a duplicate type and does not show in IBM Documentation
			//"ibm_container_vpc_worker_pool":                           {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerVpcWorkerPool")},
			//"ibm_container_worker_pool":                {Tok: tfbridge.MakeDataSource(mainPkg, "kubernetesService", "getContainerWorkerPool")},
			"ibm_cos_bucket":                           {Tok: tfbridge.MakeDataSource(mainPkg, "objectStorage", "getCosBucket")},
			"ibm_cos_bucket_object":                    {Tok: tfbridge.MakeDataSource(mainPkg, "objectStorage", "getCosBucketObject")},
			"ibm_cr_namespaces":                        {Tok: tfbridge.MakeDataSource(mainPkg, "containerRegistry", "getCrNamespaces")},
			"ibm_database":                             {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabase")},
			"ibm_database_backup":                      {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabaseBackup")},
			"ibm_database_backups":                     {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabaseBackups")},
			"ibm_database_connection":                  {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabaseConnection")},
			"ibm_database_point_in_time_recovery":      {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabasePointInTimeRecovery")},
			"ibm_database_remotes":                     {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabaseRemotes")},
			"ibm_database_task":                        {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabaseTask")},
			"ibm_database_tasks":                       {Tok: tfbridge.MakeDataSource(mainPkg, "cloudDatabases", "getDatabaseTasks")},
			"ibm_dl_gateway":                           {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlGateway")},
			"ibm_dl_gateways":                          {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlGateways")},
			"ibm_dl_locations":                         {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlLocations")},
			"ibm_dl_offering_speeds":                   {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlOfferingSpeeds")},
			"ibm_dl_port":                              {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlPort")},
			"ibm_dl_ports":                             {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlPorts")},
			"ibm_dl_provider_gateways":                 {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlProviderGateways")},
			"ibm_dl_provider_ports":                    {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlProviderPorts")},
			"ibm_dl_routers":                           {Tok: tfbridge.MakeDataSource(mainPkg, "directLinkGateway", "getDlRouters")},
			"ibm_dns_custom_resolver_forwarding_rules": {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsCustomResolverForwardingRules")},
			"ibm_dns_custom_resolver_secondary_zones":  {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsCustomResolverSecondaryZones")},
			"ibm_dns_custom_resolvers":                 {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsCustomResolvers")},
			"ibm_dns_domain":                           {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getDnsDomain")},
			"ibm_dns_domain_registration":              {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getDnsDomainRegistration")},
			"ibm_dns_glb_monitors":                     {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsGlbMonitors")},
			"ibm_dns_glb_pools":                        {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsGlbPools")},
			"ibm_dns_glbs":                             {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsGlbs")},
			"ibm_dns_permitted_networks":               {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsPermittedNetworks")},
			"ibm_dns_resource_records":                 {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsResourceRecords")},
			"ibm_dns_secondary":                        {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsSecondary")},
			"ibm_dns_zones":                            {Tok: tfbridge.MakeDataSource(mainPkg, "dnsService", "getDnsZones")},
			"ibm_en_destination":                       {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestination")},
			"ibm_en_destination_android":               {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationAndroid")},
			"ibm_en_destination_chrome":                {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationChrome")},
			"ibm_en_destination_firefox":               {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationFirefox")},
			"ibm_en_destination_ios":                   {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationIos")},
			"ibm_en_destination_safari":                {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationSafari")},
			"ibm_en_destination_slack":                 {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationSlack")},
			"ibm_en_destination_webhook":               {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinationWebhook")},
			"ibm_en_destinations":                      {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnDestinations")},
			"ibm_en_source":                            {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSource")},
			"ibm_en_subscription":                      {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscription")},
			"ibm_en_subscription_android":              {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionAndroid")},
			"ibm_en_subscription_chrome":               {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionChrome")},
			"ibm_en_subscription_email":                {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionEmail")},
			"ibm_en_subscription_firefox":              {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionFirefox")},
			"ibm_en_subscription_ios":                  {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionIos")},
			"ibm_en_subscription_safari":               {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionSafari")},
			"ibm_en_subscription_slack":                {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionSlack")},
			"ibm_en_subscription_sms":                  {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionSms")},
			"ibm_en_subscription_webhook":              {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptionWebhook")},
			"ibm_en_subscriptions":                     {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnSubscriptions")},
			"ibm_en_topic":                             {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnTopic")},
			"ibm_en_topics":                            {Tok: tfbridge.MakeDataSource(mainPkg, "eventNotifications", "getEnTopics")},
			"ibm_enterprise_account_groups":            {Tok: tfbridge.MakeDataSource(mainPkg, "enterpriseManagement", "getEnterpriseAccountGroups")},
			"ibm_enterprise_accounts":                  {Tok: tfbridge.MakeDataSource(mainPkg, "enterpriseManagement", "getEnterpriseAccounts")},
			"ibm_enterprises":                          {Tok: tfbridge.MakeDataSource(mainPkg, "enterpriseManagement", "getEnterprises")},
			"ibm_event_streams_schema":                 {Tok: tfbridge.MakeDataSource(mainPkg, "eventStreams", "getEventStreamsSchema")},
			"ibm_event_streams_topic":                  {Tok: tfbridge.MakeDataSource(mainPkg, "eventStreams", "getEventStreamsTopic")},
			"ibm_function_action":                      {Tok: tfbridge.MakeDataSource(mainPkg, "functions", "getFunctionAction")},
			"ibm_function_namespace":                   {Tok: tfbridge.MakeDataSource(mainPkg, "functions", "getFunctionNamespace")},
			"ibm_function_package":                     {Tok: tfbridge.MakeDataSource(mainPkg, "functions", "getFunctionPackage")},
			"ibm_function_rule":                        {Tok: tfbridge.MakeDataSource(mainPkg, "functions", "getFunctionRule")},
			"ibm_function_trigger":                     {Tok: tfbridge.MakeDataSource(mainPkg, "functions", "getFunctionTrigger")},
			"ibm_hpcs":                                 {Tok: tfbridge.MakeDataSource(mainPkg, "hyperProtectCryptoServices", "getHpcs")},
			"ibm_hpcs_key_template":                    {Tok: tfbridge.MakeDataSource(mainPkg, "hyperProtectCryptoServices", "getHpcsKeyTemplate")},
			"ibm_hpcs_keystore":                        {Tok: tfbridge.MakeDataSource(mainPkg, "hyperProtectCryptoServices", "getHpcsKeystore")},
			"ibm_hpcs_managed_key":                     {Tok: tfbridge.MakeDataSource(mainPkg, "hyperProtectCryptoServices", "getHpcsManagedKey")},
			"ibm_hpcs_vault":                           {Tok: tfbridge.MakeDataSource(mainPkg, "hyperProtectCryptoServices", "getHpcsVault")},
			"ibm_iam_access_group":                     {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamAccessGroup")},
			"ibm_iam_access_group_policy":              {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamAccessGroupPolicy")},
			"ibm_iam_account_settings":                 {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamAccountSettings")},
			"ibm_iam_api_key":                          {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamApiKey")},
			"ibm_iam_auth_token":                       {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamAuthToken")},
			"ibm_iam_authorization_policies":           {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamAuthorizationPolicies")},
			"ibm_iam_role_actions":                     {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamRoleActions")},
			"ibm_iam_roles":                            {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamRoles")},
			"ibm_iam_service_id":                       {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamServiceId")},
			"ibm_iam_service_policy":                   {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamServicePolicy")},
			"ibm_iam_trusted_profile":                  {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfile")},
			"ibm_iam_trusted_profile_claim_rule":       {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfileClaimRule")},
			"ibm_iam_trusted_profile_claim_rules":      {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfileClaimRules")},
			"ibm_iam_trusted_profile_link":             {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfileLink")},
			"ibm_iam_trusted_profile_links":            {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfileLinks")},
			"ibm_iam_trusted_profile_policy":           {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfilePolicy")},
			"ibm_iam_trusted_profiles":                 {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamTrustedProfiles")},
			"ibm_iam_user_policy":                      {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamUserPolicy")},
			"ibm_iam_user_profile":                     {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamUserProfile")},
			"ibm_iam_users":                            {Tok: tfbridge.MakeDataSource(mainPkg, "iam", "getIamUsers")},
			"ibm_is_backup_policies":                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBackupPolicies")},
			"ibm_is_backup_policy":                     {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBackupPolicy")},
			"ibm_is_backup_policy_plans":               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBackupPolicyPlans")},
			"ibm_is_backup_policy_plan":                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBackupPolicyPlan")},
			"ibm_is_bare_metal_server":                 {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServer")},
			"ibm_is_bare_metal_server_disk":            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerDisk")},
			"ibm_is_bare_metal_server_disks":           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerDisks")},
			"ibm_is_bare_metal_server_initialization":  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerInitialization")},
			// "ibm_is_bare_metal_server_network_interface":              {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerNetworkInterface")},
			// "ibm_is_bare_metal_server_network_interface_floating_ip":  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerNetworkInterfaceFloatingIp")},
			// "ibm_is_bare_metal_server_network_interface_floating_ips": {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerNetworkInterfaceFloatingIps")},
			// "ibm_is_bare_metal_server_network_interfaces":             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerNetworkInterfaces")},
			"ibm_is_bare_metal_server_profile":  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerProfile")},
			"ibm_is_bare_metal_server_profiles": {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServerProfiles")},
			"ibm_is_bare_metal_servers":         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsBareMetalServers")},
			"ibm_is_dedicated_host":             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHost")},
			// "ibm_is_dedicated_host_disk":        {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHostDisk")},
			// "ibm_is_dedicated_host_disks":       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHostDisks")},
			"ibm_is_dedicated_host_group":                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHostGroup")},
			"ibm_is_dedicated_host_groups":                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHostGroups")},
			"ibm_is_dedicated_host_profile":                  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHostProfile")},
			"ibm_is_dedicated_host_profiles":                 {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHostProfiles")},
			"ibm_is_dedicated_hosts":                         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsDedicatedHosts")},
			"ibm_is_endpoint_gateway_targets":                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsEndpointGatewayTargets")},
			"ibm_is_floating_ip":                             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsFloatingIp")},
			"ibm_is_floating_ips":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsFloatingIps")},
			"ibm_is_flow_log":                                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsFlowLog")},
			"ibm_is_flow_logs":                               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsFlowLogs")},
			"ibm_is_ike_policies":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsIkePolicies")},
			"ibm_is_ike_policy":                              {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsIkePolicy")},
			"ibm_is_image":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsImage")},
			"ibm_is_images":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsImages")},
			"ibm_is_instance":                                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstance")},
			"ibm_is_instance_disk":                           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceDisk")},
			"ibm_is_instance_disks":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceDisks")},
			"ibm_is_instance_group":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroup")},
			"ibm_is_instance_group_manager":                  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupManager")},
			"ibm_is_instance_group_manager_action":           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupManagerAction")},
			"ibm_is_instance_group_manager_actions":          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupManagerActions")},
			"ibm_is_instance_group_manager_policies":         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupManagerPolicies")},
			"ibm_is_instance_group_manager_policy":           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupManagerPolicy")},
			"ibm_is_instance_group_managers":                 {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupManagers")},
			"ibm_is_instance_group_membership":               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupMembership")},
			"ibm_is_instance_group_memberships":              {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceGroupMemberships")},
			"ibm_is_instance_network_interface":              {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceNetworkInterface")},
			"ibm_is_instance_network_interface_reserved_ip":  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceNetworkInterfaceReservedIp")},
			"ibm_is_instance_network_interface_reserved_ips": {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceNetworkInterfaceReservedIps")},
			"ibm_is_instance_network_interfaces":             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceNetworkInterfaces")},
			"ibm_is_instance_profile":                        {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceProfile")},
			"ibm_is_instance_profiles":                       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceProfiles")},
			"ibm_is_instance_template":                       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceTemplate")},
			"ibm_is_instance_templates":                      {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceTemplates")},
			"ibm_is_instance_volume_attachment":              {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceVolumeAttachment")},
			"ibm_is_instance_volume_attachments":             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstanceVolumeAttachments")},
			"ibm_is_instances":                               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsInstances")},
			"ibm_is_ipsec_policies":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsIpsecPolicies")},
			"ibm_is_ipsec_policy":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsIpsecPolicy")},
			"ibm_is_lb":                                      {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLb")},
			"ibm_is_lb_listener":                             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbListener")},
			"ibm_is_lb_listener_policies":                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbListenerPolicies")},
			"ibm_is_lb_listener_policy":                      {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbListenerPolicy")},
			"ibm_is_lb_listener_policy_rule":                 {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbListenerPolicyRule")},
			"ibm_is_lb_listener_policy_rules":                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbListenerPolicyRules")},
			"ibm_is_lb_listeners":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbListeners")},
			// "ibm_is_lb_pool":                                 {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbPool")},
			"ibm_is_lb_pool_member":                             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbPoolMember")},
			"ibm_is_lb_pool_members":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbPoolMembers")},
			"ibm_is_lb_pools":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbPools")},
			"ibm_is_lb_profiles":                                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbProfiles")},
			"ibm_is_lbs":                                        {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsLbs")},
			"ibm_is_network_acl":                                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsNetworkAcl")},
			"ibm_is_network_acl_rule":                           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsNetworkAclRule")},
			"ibm_is_network_acl_rules":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsNetworkAclRules")},
			"ibm_is_network_acls":                               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsNetworkAcls")},
			"ibm_is_operating_system":                           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsOperatingSystem")},
			"ibm_is_operating_systems":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsOperatingSystems")},
			"ibm_is_placement_group":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsPlacementGroup")},
			"ibm_is_placement_groups":                           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsPlacementGroups")},
			"ibm_is_public_gateway":                             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsPublicGateway")},
			"ibm_is_public_gateways":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsPublicGateways")},
			"ibm_is_region":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsRegion")},
			"ibm_is_regions":                                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsRegions")},
			"ibm_is_security_group":                             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSecurityGroup")},
			"ibm_is_security_group_rule":                        {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSecurityGroupRule")},
			"ibm_is_security_group_rules":                       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSecurityGroupRules")},
			"ibm_is_security_group_target":                      {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSecurityGroupTarget")},
			"ibm_is_security_group_targets":                     {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSecurityGroupTargets")},
			"ibm_is_security_groups":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSecurityGroups")},
			"ibm_is_snapshot":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSnapshot")},
			"ibm_is_snapshots":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSnapshots")},
			"ibm_is_ssh_key":                                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSshKey")},
			"ibm_is_ssh_keys":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSshKeys")},
			"ibm_is_subnet":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSubnet")},
			"ibm_is_subnet_reserved_ip":                         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSubnetReservedIp")},
			"ibm_is_subnet_reserved_ips":                        {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSubnetReservedIps")},
			"ibm_is_subnets":                                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsSubnets")},
			"ibm_is_virtual_endpoint_gateway":                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVirtualEndpointGateway")},
			"ibm_is_virtual_endpoint_gateway_ips":               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVirtualEndpointGatewayIps")},
			"ibm_is_virtual_endpoint_gateways":                  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVirtualEndpointGateways")},
			"ibm_is_volume":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVolume")},
			"ibm_is_volume_profile":                             {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVolumeProfile")},
			"ibm_is_volume_profiles":                            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVolumeProfiles")},
			"ibm_is_volumes":                                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVolumes")},
			"ibm_is_vpc":                                        {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpc")},
			"ibm_is_vpc_address_prefix":                         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcAddressPrefix")},
			"ibm_is_vpc_address_prefixes":                       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcAddressPrefixes")},
			"ibm_is_vpc_default_routing_table":                  {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcDefaultRoutingTable")},
			"ibm_is_vpc_routing_table":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcRoutingTable")},
			"ibm_is_vpc_routing_table_route":                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcRoutingTableRoute")},
			"ibm_is_vpc_routing_table_routes":                   {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcRoutingTableRoutes")},
			"ibm_is_vpc_routing_tables":                         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcRoutingTables")},
			"ibm_is_vpcs":                                       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpcs")},
			"ibm_is_vpn_gateway":                                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnGateway")},
			"ibm_is_vpn_gateway_connection":                     {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnGatewayConnection")},
			"ibm_is_vpn_gateway_connections":                    {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnGatewayConnections")},
			"ibm_is_vpn_gateways":                               {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnGateways")},
			"ibm_is_vpn_server_client":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnClient")},
			"ibm_is_vpn_server_client_configuration":            {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnClientConfiguration")},
			"ibm_is_vpn_server_clients":                         {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnClients")},
			"ibm_is_vpn_server_route":                           {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnRoute")},
			"ibm_is_vpn_server_routes":                          {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnRoutes")},
			"ibm_is_vpn_servers":                                {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnServers")},
			"ibm_is_vpn_server":                                 {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsVpnServer")},
			"ibm_is_zone":                                       {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsZone")},
			"ibm_is_zones":                                      {Tok: tfbridge.MakeDataSource(mainPkg, "vpcInfrastructure", "getIsZones")},
			"ibm_kms_key":                                       {Tok: tfbridge.MakeDataSource(mainPkg, "keyManagementService", "getKmsKey")},
			"ibm_kms_key_policies":                              {Tok: tfbridge.MakeDataSource(mainPkg, "keyManagementService", "getKmsKeyPolicies")},
			"ibm_kms_key_rings":                                 {Tok: tfbridge.MakeDataSource(mainPkg, "keyManagementService", "getKmsKeyRings")},
			"ibm_kms_keys":                                      {Tok: tfbridge.MakeDataSource(mainPkg, "keyManagementService", "getKmsKeys")},
			"ibm_kp_key":                                        {Tok: tfbridge.MakeDataSource(mainPkg, "keyManagementService", "getKpKey")},
			"ibm_lbaas":                                         {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getLbaas")},
			"ibm_network_vlan":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getNetworkVlan")},
			"ibm_org":                                           {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getOrg")},
			"ibm_org_quota":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getOrgQuota")},
			"ibm_pi_catalog_images":                             {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiCatalogImages")},
			"ibm_pi_cloud_connection":                           {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiCloudConnection")},
			"ibm_pi_cloud_connections":                          {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiCloudConnections")},
			"ibm_pi_cloud_instance":                             {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiCloudInstance")},
			"ibm_pi_console_languages":                          {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiConsoleLanguages")},
			"ibm_pi_dhcp":                                       {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiDhcp")},
			"ibm_pi_dhcps":                                      {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiDhcps")},
			"ibm_pi_image":                                      {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiImage")},
			"ibm_pi_images":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiImages")},
			"ibm_pi_instance":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiInstance")},
			"ibm_pi_instance_ip":                                {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiInstanceIp")},
			"ibm_pi_instance_snapshots":                         {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiInstanceSnapshots")},
			"ibm_pi_instance_volumes":                           {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiInstanceVolumes")},
			"ibm_pi_instances":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiInstances")},
			"ibm_pi_key":                                        {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiKey")},
			"ibm_pi_keys":                                       {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiKeys")},
			"ibm_pi_network":                                    {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiNetwork")},
			"ibm_pi_network_port":                               {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiNetworkPort")},
			"ibm_pi_placement_group":                            {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiPlacementGroup")},
			"ibm_pi_placement_groups":                           {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiPlacementGroups")},
			"ibm_pi_public_network":                             {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiPublicNetwork")},
			"ibm_pi_pvm_snapshots":                              {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiPvmSnapshots")},
			"ibm_pi_sap_profile":                                {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiSapProfile")},
			"ibm_pi_sap_profiles":                               {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiSapProfiles")},
			"ibm_pi_storage_pool_capacity":                      {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiStoragePoolCapacity")},
			"ibm_pi_storage_pools_capacity":                     {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiStoragePoolsCapacity")},
			"ibm_pi_storage_type_capacity":                      {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiStorageTypeCapacity")},
			"ibm_pi_storage_types_capacity":                     {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiStorageTypesCapacity")},
			"ibm_pi_system_pools":                               {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiSystemPools")},
			"ibm_pi_tenant":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiTenant")},
			"ibm_pi_volume":                                     {Tok: tfbridge.MakeDataSource(mainPkg, "powerSystems", "getPiVolume")},
			"ibm_pn_application_chrome":                         {Tok: tfbridge.MakeDataSource(mainPkg, "pushNotifications", "getPnApplicationChrome")},
			"ibm_resource_group":                                {Tok: tfbridge.MakeDataSource(mainPkg, "resourceManagement", "getResourceGroup")},
			"ibm_resource_instance":                             {Tok: tfbridge.MakeDataSource(mainPkg, "resourceManagement", "getResourceInstance")},
			"ibm_resource_key":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "resourceManagement", "getResourceKey")},
			"ibm_resource_quota":                                {Tok: tfbridge.MakeDataSource(mainPkg, "resourceManagement", "getResourceQuota")},
			"ibm_resource_tag":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "globalTagging", "getResourceTag")},
			"ibm_satellite_attach_host_script":                  {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteAttachHostScript")},
			"ibm_satellite_cluster":                             {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteCluster")},
			"ibm_satellite_cluster_worker_pool":                 {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteClusterWorkerPool")},
			"ibm_satellite_cluster_worker_pool_zone_attachment": {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteClusterWorkerPoolZoneAttachment")},
			"ibm_satellite_endpoint":                            {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteEndpoint")},
			"ibm_satellite_link":                                {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteLink")},
			"ibm_satellite_location":                            {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteLocation")},
			"ibm_satellite_location_nlb_dns":                    {Tok: tfbridge.MakeDataSource(mainPkg, "satellite", "getSatelliteLocationNlbDns")},
			"ibm_scc_account_location":                          {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccAccountLocation")},
			"ibm_scc_account_location_settings":                 {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccAccountLocationSettings")},
			"ibm_scc_account_locations":                         {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccAccountLocations")},
			"ibm_scc_account_notification_settings":             {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccAccountNotificationSettings")},
			"ibm_scc_posture_collector":                         {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureGroupCollector")},
			"ibm_scc_posture_collectors":                        {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureCollectors")},
			"ibm_scc_posture_credential":                        {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureCredential")},
			"ibm_scc_posture_credentials":                       {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureCredentials")},
			"ibm_scc_posture_group_profile":                     {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureGroupProfile")},
			"ibm_scc_posture_latest_scans":                      {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureLatestScans")},
			"ibm_scc_posture_profile":                           {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureProfile")},
			"ibm_scc_posture_profiles":                          {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureProfiles")},
			"ibm_scc_posture_scan_summaries":                    {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureScanSummaries")},
			"ibm_scc_posture_scan_summary":                      {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureScanSummary")},
			"ibm_scc_posture_scope_correlation":                 {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureScopeCorrelation")},
			"ibm_scc_posture_scope":                             {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureScope")},
			"ibm_scc_posture_scopes":                            {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccPostureScopes")},
			"ibm_scc_si_note":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccSiNote")},
			"ibm_scc_si_notes":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccSiNotes")},
			"ibm_scc_si_occurrence":                             {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccSiOccurrence")},
			"ibm_scc_si_occurrences":                            {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccSiOccurrences")},
			"ibm_scc_si_providers":                              {Tok: tfbridge.MakeDataSource(mainPkg, "securityComplianceCenter", "getSccSiProviders")},
			"ibm_schematics_action":                             {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsAction")},
			"ibm_schematics_inventory":                          {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsInventory")},
			"ibm_schematics_job":                                {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsJob")},
			"ibm_schematics_output":                             {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsOutput")},
			"ibm_schematics_resource_query":                     {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsResourceQuery")},
			"ibm_schematics_state":                              {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsState")},
			"ibm_schematics_workspace":                          {Tok: tfbridge.MakeDataSource(mainPkg, "schematics", "getSchematicsWorkspace")},
			"ibm_secrets_manager_secret":                        {Tok: tfbridge.MakeDataSource(mainPkg, "secretsManager", "getSecretsManagerSecret")},
			"ibm_secrets_manager_secrets":                       {Tok: tfbridge.MakeDataSource(mainPkg, "secretsManager", "getSecretsManagerSecrets")},
			"ibm_security_group":                                {Tok: tfbridge.MakeDataSource(mainPkg, "classicInfrastructure", "getSecurityGroup")},
			"ibm_service_instance":                              {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getServiceInstance")},
			"ibm_service_key":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getServiceKey")},
			"ibm_service_plan":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getServicePlan")},
			"ibm_space":                                         {Tok: tfbridge.MakeDataSource(mainPkg, "cloudFoundry", "getSpace")},
			"ibm_tg_connection_prefix_filter":                   {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgConnectionPrefixFilter")},
			"ibm_tg_connection_prefix_filters":                  {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgConnectionPrefixFilters")},
			"ibm_tg_gateway":                                    {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgGateway")},
			"ibm_tg_gateways":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgGateways")},
			"ibm_tg_location":                                   {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgLocation")},
			"ibm_tg_locations":                                  {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgLocations")},
			"ibm_tg_route_report":                               {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgRouteReport")},
			"ibm_tg_route_reports":                              {Tok: tfbridge.MakeDataSource(mainPkg, "transitGateway", "getTgRouteReports")},
		},
		JavaScript: &tfbridge.JavaScriptInfo{
			PackageName: "@pulumiverse/ibm",
			// List any npm dependencies and their versions
			Dependencies: map[string]string{
				"@pulumi/pulumi": "^3.0.0",
			},
			DevDependencies: map[string]string{
				"@types/node": "^10.0.0", // so we can access strongly typed node definitions.
				"@types/mime": "^2.0.0",
			},
			// See the documentation for tfbridge.OverlayInfo for how to lay out this
			// section, or refer to the AWS provider. Delete this section if there are
			// no overlay files.
			//Overlay: &tfbridge.OverlayInfo{},
		},
		Python: &tfbridge.PythonInfo{
			PackageName: "pulumiverse_ibm",
			// List any Python dependencies and their version ranges
			Requires: map[string]string{
				"pulumi": ">=3.0.0,<4.0.0",
			},
		},
		Golang: &tfbridge.GolangInfo{
			ImportBasePath: filepath.Join(
				fmt.Sprintf("github.com/pulumiverse/pulumi-%[1]s/sdk/", mainPkg),
				tfbridge.GetModuleMajorVersion(version.Version),
				"go",
				mainPkg,
			),
			GenerateResourceContainerTypes: true,
		},
		CSharp: &tfbridge.CSharpInfo{
			RootNamespace: "Pulumiverse",
			PackageReferences: map[string]string{
				"Pulumi": "3.*",
			},
		},
	}

	prov.SetAutonaming(255, "-")

	return prov
}
