// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ibm

import (
	"fmt"
	"path/filepath"

	ibm "github.com/IBM-Cloud/terraform-provider-ibm/ibm/provider"
	"github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfbridge"
	shim "github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfshim"
	shimv2 "github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfshim/sdk-v2"
	"github.com/pulumi/pulumi/sdk/v3/go/common/resource"
	"github.com/pulumiverse/pulumi-ibm/provider/pkg/version"
)

// all of the token components used below.
const (
	// This variable controls the default name of the package in the package
	// registries for nodejs and python:
	mainPkg = "ibm"
	// modules:
	mainMod = "index" // the ibm module
)

// preConfigureCallback is called before the providerConfigure function of the underlying provider.
// It should validate that the provider can be configured, and provide actionable errors in the case
// it cannot be. Configuration variables can be read from `vars` using the `stringValue` function -
// for example `stringValue(vars, "accessKey")`.
func preConfigureCallback(vars resource.PropertyMap, c shim.ResourceConfig) error {
	return nil
}

// Provider returns additional overlaid schema and metadata associated with the provider..
func Provider() tfbridge.ProviderInfo {
	// Instantiate the Terraform provider
	p := shimv2.NewProvider(ibm.Provider())

	// Create a Pulumi provider mapping
	prov := tfbridge.ProviderInfo{
		P:    p,
		Name: "ibm",
		// DisplayName is a way to be able to change the casing of the provider
		// name when being displayed on the Pulumi registry
		DisplayName: "IBM Cloud",
		// The default publisher for all packages is Pulumi.
		// Change this to your personal name (or a company name) that you
		// would like to be shown in the Pulumi Registry if this package is published
		// there.
		Publisher: "Pulumiverse",
		// LogoURL is optional but useful to help identify your package in the Pulumi Registry
		// if this package is published there.
		//
		// You may host a logo on a domain you control or add an SVG logo for your package
		// in your repository and use the raw content URL for that file as your logo URL.
		LogoURL: "https://raw.githubusercontent.com/pulumiverse/.github/main/assets/mascot.png",
		// PluginDownloadURL is an optional URL used to download the Provider
		// for use in Pulumi programs
		// https://www.pulumi.com/docs/guides/pulumi-packages/how-to-author/#support-for-github-releases
		PluginDownloadURL: "github://api.github.com/pulumiverse",
		Description:       "A Pulumi package for creating and managing IBM Cloud resources.",
		// category/cloud tag helps with categorizing the package in the Pulumi Registry.
		// For all available categories, see `Keywords` in
		// https://www.pulumi.com/docs/guides/pulumi-packages/schema/#package.
		Keywords:   []string{"pulumi", "ibm", "category/cloud"},
		License:    "Apache-2.0",
		Homepage:   "https://github.com/pulumiverse/",
		Repository: "https://github.com/pulumiverse/pulumi-ibm",
		// The GitHub Org for the provider - defaults to `terraform-providers`. Note that this
		// should match the TF provider module's require directive, not any replace directives.
		GitHubOrg: "ibm-cloud",
		Config:    map[string]*tfbridge.SchemaInfo{
			// Add any required configuration here, or remove the example below if
			// no additional points are required.
			// "region": {
			// 	Type: tfbridge.MakeType("region", "Region"),
			// 	Default: &tfbridge.DefaultInfo{
			// 		EnvVars: []string{"AWS_REGION", "AWS_DEFAULT_REGION"},
			// 	},
			// },
		},
		PreConfigureCallback: preConfigureCallback,
		Resources: map[string]*tfbridge.ResourceInfo{
			"ibm_api_gateway_endpoint":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ApiGatewayEndpoint")},
			"ibm_api_gateway_endpoint_subscription":                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ApiGatewayEndpointSubscription")},
			"ibm_app":                                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "App")},
			"ibm_app_config_environment":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppConfigEnvironment")},
			"ibm_app_config_feature":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppConfigFeature")},
			"ibm_app_domain_private":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppDomainPrivate")},
			"ibm_app_domain_shared":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppDomainShared")},
			"ibm_app_route":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppRoute")},
			"ibm_appid_action_url":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidActionUrl")},
			"ibm_appid_apm":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidApm")},
			"ibm_appid_application":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidApplication")},
			"ibm_appid_application_roles":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidApplicationRoles")},
			"ibm_appid_application_scopes":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidApplicationScopes")},
			"ibm_appid_audit_status":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidAuditStatus")},
			"ibm_appid_cloud_directory_template":                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidCloudDirectoryTemplate")},
			"ibm_appid_cloud_directory_user":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidCloudDirectoryUser")},
			"ibm_appid_idp_cloud_directory":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidIdpCloudDirectory")},
			"ibm_appid_idp_custom":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidIdpCustom")},
			"ibm_appid_idp_facebook":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidIdpFacebook")},
			"ibm_appid_idp_google":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidIdpGoogle")},
			"ibm_appid_idp_saml":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidIdpSaml")},
			"ibm_appid_languages":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidLanguages")},
			"ibm_appid_mfa":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidMfa")},
			"ibm_appid_mfa_channel":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidMfaChannel")},
			"ibm_appid_password_regex":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidPasswordRegex")},
			"ibm_appid_redirect_urls":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidRedirectUrls")},
			"ibm_appid_role":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidRole")},
			"ibm_appid_theme_color":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidThemeColor")},
			"ibm_appid_theme_text":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidThemeText")},
			"ibm_appid_token_config":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidTokenConfig")},
			"ibm_appid_user_roles":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AppidUserRoles")},
			"ibm_atracker_route":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AtrackerRoute")},
			"ibm_atracker_settings":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AtrackerSettings")},
			"ibm_atracker_target":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "AtrackerTarget")},
			"ibm_cbr_rule":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CbrRule")},
			"ibm_cbr_zone":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CbrZone")},
			"ibm_cd_tekton_pipeline":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdTektonPipeline")},
			"ibm_cd_tekton_pipeline_definition":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdTektonPipelineDefinition")},
			"ibm_cd_tekton_pipeline_property":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdTektonPipelineProperty")},
			"ibm_cd_tekton_pipeline_trigger":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdTektonPipelineTrigger")},
			"ibm_cd_tekton_pipeline_trigger_property":                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdTektonPipelineTriggerProperty")},
			"ibm_cd_toolchain":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchain")},
			"ibm_cd_toolchain_tool_appconfig":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolAppconfig")},
			"ibm_cd_toolchain_tool_artifactory":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolArtifactory")},
			"ibm_cd_toolchain_tool_bitbucketgit":                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolBitbucketgit")},
			"ibm_cd_toolchain_tool_custom":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolCustom")},
			"ibm_cd_toolchain_tool_devopsinsights":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolDevopsinsights")},
			"ibm_cd_toolchain_tool_githubconsolidated":               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolGithubconsolidated")},
			"ibm_cd_toolchain_tool_githubintegrated":                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolGithubintegrated")},
			"ibm_cd_toolchain_tool_gitlab":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolGitlab")},
			"ibm_cd_toolchain_tool_hashicorpvault":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolHashicorpvault")},
			"ibm_cd_toolchain_tool_hostedgit":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolHostedgit")},
			"ibm_cd_toolchain_tool_jenkins":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolJenkins")},
			"ibm_cd_toolchain_tool_keyprotect":                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolKeyprotect")},
			"ibm_cd_toolchain_tool_nexus":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolNexus")},
			"ibm_cd_toolchain_tool_pagerduty":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolPagerduty")},
			"ibm_cd_toolchain_tool_pipeline":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolPipeline")},
			"ibm_cd_toolchain_tool_privateworker":                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolPrivateworker")},
			"ibm_cd_toolchain_tool_saucelabs":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolSaucelabs")},
			"ibm_cd_toolchain_tool_secretsmanager":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolSecretsmanager")},
			"ibm_cd_toolchain_tool_securitycompliance":               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolSecuritycompliance")},
			"ibm_cd_toolchain_tool_slack":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolSlack")},
			"ibm_cd_toolchain_tool_sonarqube":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CdToolchainToolSonarqube")},
			"ibm_cdn":                                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Cdn")},
			"ibm_certificate_manager_import":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CertificateManagerImport")},
			"ibm_certificate_manager_order":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CertificateManagerOrder")},
			"ibm_cis":                                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Cis")},
			"ibm_cis_alert":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisAlert")},
			"ibm_cis_cache_settings":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisCacheSettings")},
			"ibm_cis_certificate_order":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisCertificateOrder")},
			"ibm_cis_certificate_upload":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisCertificateUpload")},
			"ibm_cis_custom_page":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisCustomPage")},
			"ibm_cis_dns_record":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisDnsRecord")},
			"ibm_cis_dns_records_import":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisDnsRecordsImport")},
			"ibm_cis_domain":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisDomain")},
			"ibm_cis_domain_settings":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisDomainSettings")},
			"ibm_cis_edge_functions_action":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisEdgeFunctionsAction")},
			"ibm_cis_edge_functions_trigger":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisEdgeFunctionsTrigger")},
			"ibm_cis_filter":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisFilter")},
			"ibm_cis_firewall":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisFirewall")},
			"ibm_cis_firewall_rule":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisFirewallRule")},
			"ibm_cis_global_load_balancer":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisGlobalLoadBalancer")},
			"ibm_cis_healthcheck":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisHealthcheck")},
			"ibm_cis_logpush_job":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisLogpushJob")},
			"ibm_cis_origin_pool":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisOriginPool")},
			"ibm_cis_page_rule":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisPageRule")},
			"ibm_cis_range_app":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisRangeApp")},
			"ibm_cis_rate_limit":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisRateLimit")},
			"ibm_cis_routing":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisRouting")},
			"ibm_cis_tls_settings":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisTlsSettings")},
			"ibm_cis_waf_group":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisWafGroup")},
			"ibm_cis_waf_package":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisWafPackage")},
			"ibm_cis_waf_rule":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisWafRule")},
			"ibm_cis_webhook":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CisWebhook")},
			"ibm_cloud_shell_account_settings":                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CloudShellAccountSettings")},
			"ibm_cloudant":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Cloudant")},
			"ibm_cloudant_database":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CloudantDatabase")},
			"ibm_cm_catalog":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CmCatalog")},
			"ibm_cm_offering":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CmOffering")},
			"ibm_cm_offering_instance":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CmOfferingInstance")},
			"ibm_cm_version":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CmVersion")},
			"ibm_compute_autoscale_group":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeAutoscaleGroup")},
			"ibm_compute_autoscale_policy":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeAutoscalePolicy")},
			"ibm_compute_bare_metal":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeBareMetal")},
			"ibm_compute_dedicated_host":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeDedicatedHost")},
			"ibm_compute_monitor":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeMonitor")},
			"ibm_compute_placement_group":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputePlacementGroup")},
			"ibm_compute_provisioning_hook":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeProvisioningHook")},
			"ibm_compute_reserved_capacity":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeReservedCapacity")},
			"ibm_compute_ssh_key":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeSshKey")},
			"ibm_compute_ssl_certificate":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeSslCertificate")},
			"ibm_compute_user":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeUser")},
			"ibm_compute_vm_instance":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ComputeVmInstance")},
			"ibm_container_addons":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerAddons")},
			"ibm_container_alb":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerAlb")},
			"ibm_container_alb_cert":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerAlbCert")},
			"ibm_container_alb_create":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerAlbCreate")},
			"ibm_container_api_key_reset":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerApiKeyReset")},
			"ibm_container_bind_service":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerBindService")},
			"ibm_container_cluster":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerCluster")},
			"ibm_container_cluster_feature":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerClusterFeature")},
			"ibm_container_dedicated_host":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerDedicatedHost")},
			"ibm_container_dedicated_host_pool":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerDedicatedHostPool")},
			"ibm_container_nlb_dns":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerNlbDns")},
			"ibm_container_storage_attachment":                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerStorageAttachment")},
			"ibm_container_vpc_alb":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerVpcAlb")},
			"ibm_container_vpc_alb_create":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerVpcAlbCreate")},
			"ibm_container_vpc_cluster":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerVpcCluster")},
			"ibm_container_vpc_worker_pool":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerVpcWorkerPool")},
			"ibm_container_worker_pool":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerWorkerPool")},
			"ibm_container_worker_pool_zone_attachment":              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ContainerWorkerPoolZoneAttachment")},
			"ibm_cos_bucket":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CosBucket")},
			"ibm_cos_bucket_object":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CosBucketObject")},
			"ibm_cr_namespace":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CrNamespace")},
			"ibm_cr_retention_policy":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "CrRetentionPolicy")},
			"ibm_database":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Database")},
			"ibm_dl_gateway":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DlGateway")},
			"ibm_dl_provider_gateway":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DlProviderGateway")},
			"ibm_dl_virtual_connection":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DlVirtualConnection")},
			"ibm_dns_custom_resolver":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsCustomResolver")},
			"ibm_dns_custom_resolver_forwarding_rule":                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsCustomResolverForwardingRule")},
			"ibm_dns_custom_resolver_location":                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsCustomResolverLocation")},
			"ibm_dns_domain":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsDomain")},
			"ibm_dns_domain_registration_nameservers":                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsDomainRegistrationNameservers")},
			"ibm_dns_glb":                                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsGlb")},
			"ibm_dns_glb_monitor":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsGlbMonitor")},
			"ibm_dns_glb_pool":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsGlbPool")},
			"ibm_dns_permitted_network":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsPermittedNetwork")},
			"ibm_dns_record":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsRecord")},
			"ibm_dns_resource_record":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsResourceRecord")},
			"ibm_dns_reverse_record":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsReverseRecord")},
			"ibm_dns_secondary":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsSecondary")},
			"ibm_dns_zone":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "DnsZone")},
			"ibm_en_destination":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestination")},
			"ibm_en_destination_android":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationAndroid")},
			"ibm_en_destination_chrome":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationChrome")},
			"ibm_en_destination_firefox":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationFirefox")},
			"ibm_en_destination_ios":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationIos")},
			"ibm_en_destination_safari":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationSafari")},
			"ibm_en_destination_slack":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationSlack")},
			"ibm_en_destination_webhook":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnDestinationWebhook")},
			"ibm_en_source":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSource")},
			"ibm_en_subscription":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscription")},
			"ibm_en_subscription_android":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionAndroid")},
			"ibm_en_subscription_chrome":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionChrome")},
			"ibm_en_subscription_email":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionEmail")},
			"ibm_en_subscription_firefox":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionFirefox")},
			"ibm_en_subscription_ios":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionIos")},
			"ibm_en_subscription_safari":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionSafari")},
			"ibm_en_subscription_slack":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionSlack")},
			"ibm_en_subscription_sms":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionSms")},
			"ibm_en_subscription_webhook":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnSubscriptionWebhook")},
			"ibm_en_topic":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnTopic")},
			"ibm_enterprise":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Enterprise")},
			"ibm_enterprise_account":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnterpriseAccount")},
			"ibm_enterprise_account_group":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EnterpriseAccountGroup")},
			"ibm_event_streams_schema":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EventStreamsSchema")},
			"ibm_event_streams_topic":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "EventStreamsTopic")},
			"ibm_firewall":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Firewall")},
			"ibm_firewall_policy":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "FirewallPolicy")},
			"ibm_function_action":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "FunctionAction")},
			"ibm_function_namespace":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "FunctionNamespace")},
			"ibm_function_package":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "FunctionPackage")},
			"ibm_function_rule":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "FunctionRule")},
			"ibm_function_trigger":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "FunctionTrigger")},
			"ibm_hardware_firewall_shared":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "HardwareFirewallShared")},
			"ibm_hpcs":                                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Hpcs")},
			"ibm_hpcs_key_template":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "HpcsKeyTemplate")},
			"ibm_hpcs_keystore":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "HpcsKeystore")},
			"ibm_hpcs_managed_key":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "HpcsManagedKey")},
			"ibm_hpcs_vault":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "HpcsVault")},
			"ibm_iam_access_group":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAccessGroup")},
			"ibm_iam_access_group_dynamic_rule":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAccessGroupDynamicRule")},
			"ibm_iam_access_group_members":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAccessGroupMembers")},
			"ibm_iam_access_group_policy":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAccessGroupPolicy")},
			"ibm_iam_account_settings":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAccountSettings")},
			"ibm_iam_api_key":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamApiKey")},
			"ibm_iam_authorization_policy":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAuthorizationPolicy")},
			"ibm_iam_authorization_policy_detach":                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamAuthorizationPolicyDetach")},
			"ibm_iam_custom_role":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamCustomRole")},
			"ibm_iam_service_api_key":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamServiceApiKey")},
			"ibm_iam_service_id":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamServiceId")},
			"ibm_iam_service_policy":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamServicePolicy")},
			"ibm_iam_trusted_profile":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamTrustedProfile")},
			"ibm_iam_trusted_profile_claim_rule":                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamTrustedProfileClaimRule")},
			"ibm_iam_trusted_profile_link":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamTrustedProfileLink")},
			"ibm_iam_trusted_profile_policy":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamTrustedProfilePolicy")},
			"ibm_iam_user_invite":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamUserInvite")},
			"ibm_iam_user_policy":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamUserPolicy")},
			"ibm_iam_user_settings":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IamUserSettings")},
			"ibm_ipsec_vpn":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IpsecVpn")},
			"ibm_is_bare_metal_server":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsBareMetalServer")},
			"ibm_is_bare_metal_server_action":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsBareMetalServerAction")},
			"ibm_is_bare_metal_server_disk":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsBareMetalServerDisk")},
			"ibm_is_bare_metal_server_network_interface":             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsBareMetalServerNetworkInterface")},
			"ibm_is_bare_metal_server_network_interface_allow_float": {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsBareMetalServerNetworkInterfaceAllowFloat")},
			"ibm_is_bare_metal_server_network_interface_floating_ip": {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsBareMetalServerNetworkInterfaceFloatingIp")},
			"ibm_is_dedicated_host":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsDedicatedHost")},
			"ibm_is_dedicated_host_disk_management":                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsDedicatedHostDiskManagement")},
			"ibm_is_dedicated_host_group":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsDedicatedHostGroup")},
			"ibm_is_floating_ip":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsFloatingIp")},
			"ibm_is_flow_log":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsFlowLog")},
			"ibm_is_ike_policy":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsIkePolicy")},
			"ibm_is_image":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsImage")},
			"ibm_is_instance":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstance")},
			"ibm_is_instance_action":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceAction")},
			"ibm_is_instance_disk_management":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceDiskManagement")},
			"ibm_is_instance_group":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceGroup")},
			"ibm_is_instance_group_manager":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceGroupManager")},
			"ibm_is_instance_group_manager_action":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceGroupManagerAction")},
			"ibm_is_instance_group_manager_policy":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceGroupManagerPolicy")},
			"ibm_is_instance_group_membership":                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceGroupMembership")},
			"ibm_is_instance_network_interface":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceNetworkInterface")},
			"ibm_is_instance_template":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceTemplate")},
			"ibm_is_instance_volume_attachment":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsInstanceVolumeAttachment")},
			"ibm_is_ipsec_policy":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsIpsecPolicy")},
			"ibm_is_lb":                                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsLb")},
			"ibm_is_lb_listener":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsLbListener")},
			"ibm_is_lb_listener_policy":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsLbListenerPolicy")},
			"ibm_is_lb_listener_policy_rule":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsLbListenerPolicyRule")},
			"ibm_is_lb_pool":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsLbPool")},
			"ibm_is_lb_pool_member":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsLbPoolMember")},
			"ibm_is_network_acl":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsNetworkAcl")},
			"ibm_is_network_acl_rule":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsNetworkAclRule")},
			"ibm_is_placement_group":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsPlacementGroup")},
			"ibm_is_public_gateway":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsPublicGateway")},
			"ibm_is_security_group":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSecurityGroup")},
			"ibm_is_security_group_network_interface_attachment":     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSecurityGroupNetworkInterfaceAttachment")},
			"ibm_is_security_group_rule":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSecurityGroupRule")},
			"ibm_is_security_group_target":                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSecurityGroupTarget")},
			"ibm_is_snapshot":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSnapshot")},
			"ibm_is_ssh_key":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSshKey")},
			"ibm_is_subnet":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSubnet")},
			"ibm_is_subnet_network_acl_attachment":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSubnetNetworkAclAttachment")},
			"ibm_is_subnet_public_gateway_attachment":                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSubnetPublicGatewayAttachment")},
			"ibm_is_subnet_reserved_ip":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSubnetReservedIp")},
			"ibm_is_subnet_routing_table_attachment":                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsSubnetRoutingTableAttachment")},
			"ibm_is_virtual_endpoint_gateway":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVirtualEndpointGateway")},
			"ibm_is_virtual_endpoint_gateway_ip":                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVirtualEndpointGatewayIp")},
			"ibm_is_volume":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVolume")},
			"ibm_is_vpc":                                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpc")},
			"ibm_is_vpc_address_prefix":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpcAddressPrefix")},
			"ibm_is_vpc_route":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpcRoute")},
			"ibm_is_vpc_routing_table":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpcRoutingTable")},
			"ibm_is_vpc_routing_table_route":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpcRoutingTableRoute")},
			"ibm_is_vpn_gateway":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpnGateway")},
			"ibm_is_vpn_gateway_connection":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "IsVpnGatewayConnection")},
			"ibm_kms_key":                                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "KmsKey")},
			"ibm_kms_key_alias":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "KmsKeyAlias")},
			"ibm_kms_key_policies":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "KmsKeyPolicies")},
			"ibm_kms_key_rings":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "KmsKeyRings")},
			"ibm_kp_key":                                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "KpKey")},
			"ibm_lb":                                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Lb")},
			"ibm_lb_service":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbService")},
			"ibm_lb_service_group":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbServiceGroup")},
			"ibm_lb_vpx":                                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbVpx")},
			"ibm_lb_vpx_ha":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbVpxHa")},
			"ibm_lb_vpx_service":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbVpxService")},
			"ibm_lb_vpx_vip":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbVpxVip")},
			"ibm_lbaas":                                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Lbaas")},
			"ibm_lbaas_health_monitor":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbaasHealthMonitor")},
			"ibm_lbaas_server_instance_attachment":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "LbaasServerInstanceAttachment")},
			"ibm_multi_vlan_firewall":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "MultiVlanFirewall")},
			"ibm_network_gateway":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "NetworkGateway")},
			"ibm_network_gateway_vlan_association":                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "NetworkGatewayVlanAssociation")},
			"ibm_network_interface_sg_attachment":                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "NetworkInterfaceSgAttachment")},
			"ibm_network_public_ip":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "NetworkPublicIp")},
			"ibm_network_vlan":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "NetworkVlan")},
			"ibm_network_vlan_spanning":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "NetworkVlanSpanning")},
			"ibm_ob_logging":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ObLogging")},
			"ibm_ob_monitoring":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ObMonitoring")},
			"ibm_object_storage_account":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ObjectStorageAccount")},
			"ibm_org":                                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Org")},
			"ibm_pi_capture":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiCapture")},
			"ibm_pi_cloud_connection":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiCloudConnection")},
			"ibm_pi_cloud_connection_network_attach":                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiCloudConnectionNetworkAttach")},
			"ibm_pi_console_language":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiConsoleLanguage")},
			"ibm_pi_dhcp":                                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiDhcp")},
			"ibm_pi_ike_policy":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiIkePolicy")},
			"ibm_pi_image":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiImage")},
			"ibm_pi_image_export":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiImageExport")},
			"ibm_pi_instance":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiInstance")},
			"ibm_pi_ipsec_policy":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiIpsecPolicy")},
			"ibm_pi_key":                                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiKey")},
			"ibm_pi_network":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiNetwork")},
			"ibm_pi_network_port":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiNetworkPort")},
			"ibm_pi_network_port_attach":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiNetworkPortAttach")},
			"ibm_pi_operations":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiOperations")},
			"ibm_pi_placement_group":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiPlacementGroup")},
			"ibm_pi_snapshot":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiSnapshot")},
			"ibm_pi_volume":                                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiVolume")},
			"ibm_pi_volume_attach":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiVolumeAttach")},
			"ibm_pi_vpn_connection":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PiVpnConnection")},
			"ibm_pn_application_chrome":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "PnApplicationChrome")},
			"ibm_resource_group":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ResourceGroup")},
			"ibm_resource_instance":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ResourceInstance")},
			"ibm_resource_key":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ResourceKey")},
			"ibm_resource_tag":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ResourceTag")},
			"ibm_satellite_cluster":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteCluster")},
			"ibm_satellite_cluster_worker_pool":                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteClusterWorkerPool")},
			"ibm_satellite_cluster_worker_pool_zone_attachment":      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteClusterWorkerPoolZoneAttachment")},
			"ibm_satellite_endpoint":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteEndpoint")},
			"ibm_satellite_host":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteHost")},
			"ibm_satellite_link":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteLink")},
			"ibm_satellite_location":                                 {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteLocation")},
			"ibm_satellite_location_nlb_dns":                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SatelliteLocationNlbDns")},
			"ibm_scc_account_settings":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccAccountSettings")},
			"ibm_scc_posture_collector":                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccPostureCollector")},
			"ibm_scc_posture_credential":                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccPostureCredential")},
			"ibm_scc_posture_scope":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccPostureScope")},
			"ibm_scc_rule":                                           {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccRule")},
			"ibm_scc_rule_attachment":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccRuleAttachment")},
			"ibm_scc_si_note":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccSiNote")},
			"ibm_scc_si_occurrence":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccSiOccurrence")},
			"ibm_scc_template":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccTemplate")},
			"ibm_scc_template_attachment":                            {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SccTemplateAttachment")},
			"ibm_schematics_action":                                  {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SchematicsAction")},
			"ibm_schematics_inventory":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SchematicsInventory")},
			"ibm_schematics_job":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SchematicsJob")},
			"ibm_schematics_resource_query":                          {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SchematicsResourceQuery")},
			"ibm_schematics_workspace":                               {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SchematicsWorkspace")},
			"ibm_security_group":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SecurityGroup")},
			"ibm_security_group_rule":                                {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SecurityGroupRule")},
			"ibm_service_instance":                                   {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ServiceInstance")},
			"ibm_service_key":                                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "ServiceKey")},
			"ibm_space":                                              {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Space")},
			"ibm_ssl_certificate":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "SslCertificate")},
			"ibm_storage_block":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "StorageBlock")},
			"ibm_storage_evault":                                     {Tok: tfbridge.MakeResource(mainPkg, mainMod, "StorageEvault")},
			"ibm_storage_file":                                       {Tok: tfbridge.MakeResource(mainPkg, mainMod, "StorageFile")},
			"ibm_subnet":                                             {Tok: tfbridge.MakeResource(mainPkg, mainMod, "Subnet")},
			"ibm_tg_connection":                                      {Tok: tfbridge.MakeResource(mainPkg, mainMod, "TgConnection")},
			"ibm_tg_connection_prefix_filter":                        {Tok: tfbridge.MakeResource(mainPkg, mainMod, "TgConnectionPrefixFilter")},
			"ibm_tg_gateway":                                         {Tok: tfbridge.MakeResource(mainPkg, mainMod, "TgGateway")},
			"ibm_tg_route_report":                                    {Tok: tfbridge.MakeResource(mainPkg, mainMod, "TgRouteReport")},
		},
		DataSources: map[string]*tfbridge.DataSourceInfo{
			"ibm_account":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAccount")},
			"ibm_api_gateway":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getApiGateway")},
			"ibm_app":                                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getApp")},
			"ibm_app_config_environment":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppConfigEnvironment")},
			"ibm_app_config_environments":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppConfigEnvironments")},
			"ibm_app_config_feature":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppConfigFeature")},
			"ibm_app_config_features":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppConfigFeatures")},
			"ibm_app_domain_private":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppDomainPrivate")},
			"ibm_app_domain_shared":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppDomainShared")},
			"ibm_app_route":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppRoute")},
			"ibm_appid_action_url":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidActionUrl")},
			"ibm_appid_apm":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidApm")},
			"ibm_appid_application":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidApplication")},
			"ibm_appid_application_roles":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidApplicationRoles")},
			"ibm_appid_application_scopes":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidApplicationScopes")},
			"ibm_appid_applications":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidApplications")},
			"ibm_appid_audit_status":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidAuditStatus")},
			"ibm_appid_cloud_directory_template":                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidCloudDirectoryTemplate")},
			"ibm_appid_cloud_directory_user":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidCloudDirectoryUser")},
			"ibm_appid_idp_cloud_directory":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidIdpCloudDirectory")},
			"ibm_appid_idp_custom":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidIdpCustom")},
			"ibm_appid_idp_facebook":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidIdpFacebook")},
			"ibm_appid_idp_google":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidIdpGoogle")},
			"ibm_appid_idp_saml":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidIdpSaml")},
			"ibm_appid_idp_saml_metadata":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidIdpSamlMetadata")},
			"ibm_appid_languages":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidLanguages")},
			"ibm_appid_mfa":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidMfa")},
			"ibm_appid_mfa_channel":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidMfaChannel")},
			"ibm_appid_password_regex":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidPasswordRegex")},
			"ibm_appid_redirect_urls":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidRedirectUrls")},
			"ibm_appid_role":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidRole")},
			"ibm_appid_roles":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidRoles")},
			"ibm_appid_theme_color":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidThemeColor")},
			"ibm_appid_theme_text":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidThemeText")},
			"ibm_appid_token_config":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidTokenConfig")},
			"ibm_appid_user_roles":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAppidUserRoles")},
			"ibm_atracker_endpoints":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAtrackerEndpoints")},
			"ibm_atracker_routes":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAtrackerRoutes")},
			"ibm_atracker_targets":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getAtrackerTargets")},
			"ibm_cbr_rule":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCbrRule")},
			"ibm_cbr_zone":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCbrZone")},
			"ibm_cd_tekton_pipeline":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdTektonPipeline")},
			"ibm_cd_tekton_pipeline_definition":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdTektonPipelineDefinition")},
			"ibm_cd_tekton_pipeline_property":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdTektonPipelineProperty")},
			"ibm_cd_tekton_pipeline_trigger":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdTektonPipelineTrigger")},
			"ibm_cd_tekton_pipeline_trigger_property":                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdTektonPipelineTriggerProperty")},
			"ibm_cd_toolchain":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchain")},
			"ibm_cd_toolchain_tool_appconfig":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolAppconfig")},
			"ibm_cd_toolchain_tool_artifactory":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolArtifactory")},
			"ibm_cd_toolchain_tool_bitbucketgit":                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolBitbucketgit")},
			"ibm_cd_toolchain_tool_custom":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolCustom")},
			"ibm_cd_toolchain_tool_devopsinsights":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolDevopsinsights")},
			"ibm_cd_toolchain_tool_githubconsolidated":                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolGithubconsolidated")},
			"ibm_cd_toolchain_tool_githubintegrated":                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolGithubintegrated")},
			"ibm_cd_toolchain_tool_gitlab":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolGitlab")},
			"ibm_cd_toolchain_tool_hashicorpvault":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolHashicorpvault")},
			"ibm_cd_toolchain_tool_hostedgit":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolHostedgit")},
			"ibm_cd_toolchain_tool_jenkins":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolJenkins")},
			"ibm_cd_toolchain_tool_keyprotect":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolKeyprotect")},
			"ibm_cd_toolchain_tool_nexus":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolNexus")},
			"ibm_cd_toolchain_tool_pagerduty":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolPagerduty")},
			"ibm_cd_toolchain_tool_pipeline":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolPipeline")},
			"ibm_cd_toolchain_tool_privateworker":                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolPrivateworker")},
			"ibm_cd_toolchain_tool_saucelabs":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolSaucelabs")},
			"ibm_cd_toolchain_tool_secretsmanager":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolSecretsmanager")},
			"ibm_cd_toolchain_tool_securitycompliance":                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolSecuritycompliance")},
			"ibm_cd_toolchain_tool_slack":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolSlack")},
			"ibm_cd_toolchain_tool_sonarqube":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCdToolchainToolSonarqube")},
			"ibm_certificate_manager_certificate":                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCertificateManagerCertificate")},
			"ibm_certificate_manager_certificates":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCertificateManagerCertificates")},
			"ibm_cis":                                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCis")},
			"ibm_cis_alerts":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisAlerts")},
			"ibm_cis_cache_settings":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisCacheSettings")},
			"ibm_cis_certificates":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisCertificates")},
			"ibm_cis_custom_certificates":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisCustomCertificates")},
			"ibm_cis_custom_pages":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisCustomPages")},
			"ibm_cis_dns_records":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisDnsRecords")},
			"ibm_cis_domain":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisDomain")},
			"ibm_cis_edge_functions_actions":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisEdgeFunctionsActions")},
			"ibm_cis_edge_functions_triggers":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisEdgeFunctionsTriggers")},
			"ibm_cis_filters":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisFilters")},
			"ibm_cis_firewall":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisFirewall")},
			"ibm_cis_firewall_rules":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisFirewallRules")},
			"ibm_cis_global_load_balancers":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisGlobalLoadBalancers")},
			"ibm_cis_healthchecks":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisHealthchecks")},
			"ibm_cis_ip_addresses":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisIpAddresses")},
			"ibm_cis_logpush_jobs":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisLogpushJobs")},
			"ibm_cis_origin_pools":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisOriginPools")},
			"ibm_cis_page_rules":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisPageRules")},
			"ibm_cis_range_apps":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisRangeApps")},
			"ibm_cis_rate_limit":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisRateLimit")},
			"ibm_cis_waf_groups":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisWafGroups")},
			"ibm_cis_waf_packages":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisWafPackages")},
			"ibm_cis_waf_rules":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisWafRules")},
			"ibm_cis_webhooks":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCisWebhooks")},
			"ibm_cloud_shell_account_settings":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCloudShellAccountSettings")},
			"ibm_cloudant":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCloudant")},
			"ibm_cloudant_database":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCloudantDatabase")},
			"ibm_cm_catalog":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCmCatalog")},
			"ibm_cm_offering":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCmOffering")},
			"ibm_cm_offering_instance":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCmOfferingInstance")},
			"ibm_cm_version":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCmVersion")},
			"ibm_compute_bare_metal":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getComputeBareMetal")},
			"ibm_compute_image_template":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getComputeImageTemplate")},
			"ibm_compute_placement_group":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getComputePlacementGroup")},
			"ibm_compute_reserved_capacity":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getComputeReservedCapacity")},
			"ibm_compute_ssh_key":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getComputeSshKey")},
			"ibm_compute_vm_instance":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getComputeVmInstance")},
			"ibm_container_addons":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerAddons")},
			"ibm_container_alb":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerAlb")},
			"ibm_container_alb_cert":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerAlbCert")},
			"ibm_container_bind_service":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerBindService")},
			"ibm_container_cluster":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerCluster")},
			"ibm_container_cluster_config":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerClusterConfig")},
			"ibm_container_cluster_versions":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerClusterVersions")},
			"ibm_container_cluster_worker":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerClusterWorker")},
			"ibm_container_dedicated_host":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerDedicatedHost")},
			"ibm_container_dedicated_host_flavor":                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerDedicatedHostFlavor")},
			"ibm_container_dedicated_host_flavors":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerDedicatedHostFlavors")},
			"ibm_container_dedicated_host_pool":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerDedicatedHostPool")},
			"ibm_container_nlb_dns":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerNlbDns")},
			"ibm_container_storage_attachment":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerStorageAttachment")},
			"ibm_container_vpc_alb":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerVpcAlb")},
			"ibm_container_vpc_cluster":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerVpcCluster")},
			"ibm_container_vpc_cluster_alb":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerVpcClusterAlb")},
			"ibm_container_vpc_cluster_worker":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerVpcClusterWorker")},
			"ibm_container_vpc_cluster_worker_pool":                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerVpcClusterWorkerPool")},
			"ibm_container_vpc_worker_pool":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerVpcWorkerPool")},
			"ibm_container_worker_pool":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getContainerWorkerPool")},
			"ibm_cos_bucket":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCosBucket")},
			"ibm_cos_bucket_object":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCosBucketObject")},
			"ibm_cr_namespaces":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getCrNamespaces")},
			"ibm_database":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDatabase")},
			"ibm_database_backup":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDatabaseBackup")},
			"ibm_database_backups":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDatabaseBackups")},
			"ibm_database_connection":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDatabaseConnection")},
			"ibm_database_point_in_time_recovery":                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDatabasePointInTimeRecovery")},
			"ibm_database_remotes":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDatabaseRemotes")},
			"ibm_dl_gateway":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlGateway")},
			"ibm_dl_gateways":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlGateways")},
			"ibm_dl_locations":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlLocations")},
			"ibm_dl_offering_speeds":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlOfferingSpeeds")},
			"ibm_dl_port":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlPort")},
			"ibm_dl_ports":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlPorts")},
			"ibm_dl_provider_gateways":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlProviderGateways")},
			"ibm_dl_provider_ports":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlProviderPorts")},
			"ibm_dl_routers":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDlRouters")},
			"ibm_dns_custom_resolver_forwarding_rules":                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsCustomResolverForwardingRules")},
			"ibm_dns_custom_resolvers":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsCustomResolvers")},
			"ibm_dns_domain":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsDomain")},
			"ibm_dns_domain_registration":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsDomainRegistration")},
			"ibm_dns_glb_monitors":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsGlbMonitors")},
			"ibm_dns_glb_pools":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsGlbPools")},
			"ibm_dns_glbs":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsGlbs")},
			"ibm_dns_permitted_networks":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsPermittedNetworks")},
			"ibm_dns_resource_records":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsResourceRecords")},
			"ibm_dns_secondary":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsSecondary")},
			"ibm_dns_zones":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getDnsZones")},
			"ibm_en_destination":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestination")},
			"ibm_en_destination_android":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationAndroid")},
			"ibm_en_destination_chrome":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationChrome")},
			"ibm_en_destination_firefox":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationFirefox")},
			"ibm_en_destination_ios":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationIos")},
			"ibm_en_destination_safari":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationSafari")},
			"ibm_en_destination_slack":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationSlack")},
			"ibm_en_destination_webhook":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinationWebhook")},
			"ibm_en_destinations":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnDestinations")},
			"ibm_en_source":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSource")},
			"ibm_en_subscription":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscription")},
			"ibm_en_subscription_android":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionAndroid")},
			"ibm_en_subscription_chrome":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionChrome")},
			"ibm_en_subscription_email":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionEmail")},
			"ibm_en_subscription_firefox":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionFirefox")},
			"ibm_en_subscription_ios":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionIos")},
			"ibm_en_subscription_safari":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionSafari")},
			"ibm_en_subscription_slack":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionSlack")},
			"ibm_en_subscription_sms":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionSms")},
			"ibm_en_subscription_webhook":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptionWebhook")},
			"ibm_en_subscriptions":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnSubscriptions")},
			"ibm_en_topic":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnTopic")},
			"ibm_en_topics":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnTopics")},
			"ibm_enterprise_account_groups":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnterpriseAccountGroups")},
			"ibm_enterprise_accounts":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnterpriseAccounts")},
			"ibm_enterprises":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEnterprises")},
			"ibm_event_streams_schema":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEventStreamsSchema")},
			"ibm_event_streams_topic":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getEventStreamsTopic")},
			"ibm_function_action":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getFunctionAction")},
			"ibm_function_namespace":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getFunctionNamespace")},
			"ibm_function_package":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getFunctionPackage")},
			"ibm_function_rule":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getFunctionRule")},
			"ibm_function_trigger":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getFunctionTrigger")},
			"ibm_hpcs":                                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getHpcs")},
			"ibm_hpcs_key_template":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getHpcsKeyTemplate")},
			"ibm_hpcs_keystore":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getHpcsKeystore")},
			"ibm_hpcs_managed_key":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getHpcsManagedKey")},
			"ibm_hpcs_vault":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getHpcsVault")},
			"ibm_iam_access_group":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamAccessGroup")},
			"ibm_iam_access_group_policy":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamAccessGroupPolicy")},
			"ibm_iam_account_settings":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamAccountSettings")},
			"ibm_iam_api_key":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamApiKey")},
			"ibm_iam_auth_token":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamAuthToken")},
			"ibm_iam_authorization_policies":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamAuthorizationPolicies")},
			"ibm_iam_role_actions":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamRoleActions")},
			"ibm_iam_roles":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamRoles")},
			"ibm_iam_service_id":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamServiceId")},
			"ibm_iam_service_policy":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamServicePolicy")},
			"ibm_iam_trusted_profile":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfile")},
			"ibm_iam_trusted_profile_claim_rule":                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfileClaimRule")},
			"ibm_iam_trusted_profile_claim_rules":                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfileClaimRules")},
			"ibm_iam_trusted_profile_link":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfileLink")},
			"ibm_iam_trusted_profile_links":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfileLinks")},
			"ibm_iam_trusted_profile_policy":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfilePolicy")},
			"ibm_iam_trusted_profiles":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamTrustedProfiles")},
			"ibm_iam_user_policy":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamUserPolicy")},
			"ibm_iam_user_profile":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamUserProfile")},
			"ibm_iam_users":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIamUsers")},
			"ibm_is_bare_metal_server":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServer")},
			"ibm_is_bare_metal_server_disk":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerDisk")},
			"ibm_is_bare_metal_server_disks":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerDisks")},
			"ibm_is_bare_metal_server_initialization":                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerInitialization")},
			"ibm_is_bare_metal_server_network_interface":              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerNetworkInterface")},
			"ibm_is_bare_metal_server_network_interface_floating_ip":  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerNetworkInterfaceFloatingIp")},
			"ibm_is_bare_metal_server_network_interface_floating_ips": {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerNetworkInterfaceFloatingIps")},
			"ibm_is_bare_metal_server_network_interfaces":             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerNetworkInterfaces")},
			"ibm_is_bare_metal_server_profile":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerProfile")},
			"ibm_is_bare_metal_server_profiles":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServerProfiles")},
			"ibm_is_bare_metal_servers":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsBareMetalServers")},
			"ibm_is_dedicated_host":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHost")},
			"ibm_is_dedicated_host_disk":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHostDisk")},
			"ibm_is_dedicated_host_disks":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHostDisks")},
			"ibm_is_dedicated_host_group":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHostGroup")},
			"ibm_is_dedicated_host_groups":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHostGroups")},
			"ibm_is_dedicated_host_profile":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHostProfile")},
			"ibm_is_dedicated_host_profiles":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHostProfiles")},
			"ibm_is_dedicated_hosts":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsDedicatedHosts")},
			"ibm_is_endpoint_gateway_targets":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsEndpointGatewayTargets")},
			"ibm_is_floating_ip":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsFloatingIp")},
			"ibm_is_floating_ips":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsFloatingIps")},
			"ibm_is_flow_log":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsFlowLog")},
			"ibm_is_flow_logs":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsFlowLogs")},
			"ibm_is_ike_policies":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsIkePolicies")},
			"ibm_is_ike_policy":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsIkePolicy")},
			"ibm_is_image":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsImage")},
			"ibm_is_images":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsImages")},
			"ibm_is_instance":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstance")},
			"ibm_is_instance_disk":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceDisk")},
			"ibm_is_instance_disks":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceDisks")},
			"ibm_is_instance_group":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroup")},
			"ibm_is_instance_group_manager":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupManager")},
			"ibm_is_instance_group_manager_action":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupManagerAction")},
			"ibm_is_instance_group_manager_actions":                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupManagerActions")},
			"ibm_is_instance_group_manager_policies":                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupManagerPolicies")},
			"ibm_is_instance_group_manager_policy":                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupManagerPolicy")},
			"ibm_is_instance_group_managers":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupManagers")},
			"ibm_is_instance_group_membership":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupMembership")},
			"ibm_is_instance_group_memberships":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceGroupMemberships")},
			"ibm_is_instance_network_interface":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceNetworkInterface")},
			"ibm_is_instance_network_interface_reserved_ip":           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceNetworkInterfaceReservedIp")},
			"ibm_is_instance_network_interface_reserved_ips":          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceNetworkInterfaceReservedIps")},
			"ibm_is_instance_network_interfaces":                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceNetworkInterfaces")},
			"ibm_is_instance_profile":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceProfile")},
			"ibm_is_instance_profiles":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceProfiles")},
			"ibm_is_instance_template":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceTemplate")},
			"ibm_is_instance_templates":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceTemplates")},
			"ibm_is_instance_volume_attachment":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceVolumeAttachment")},
			"ibm_is_instance_volume_attachments":                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstanceVolumeAttachments")},
			"ibm_is_instances":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsInstances")},
			"ibm_is_ipsec_policies":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsIpsecPolicies")},
			"ibm_is_ipsec_policy":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsIpsecPolicy")},
			"ibm_is_lb":                                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLb")},
			"ibm_is_lb_listener":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbListener")},
			"ibm_is_lb_listener_policies":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbListenerPolicies")},
			"ibm_is_lb_listener_policy":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbListenerPolicy")},
			"ibm_is_lb_listener_policy_rule":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbListenerPolicyRule")},
			"ibm_is_lb_listener_policy_rules":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbListenerPolicyRules")},
			"ibm_is_lb_listeners":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbListeners")},
			"ibm_is_lb_pool":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbPool")},
			"ibm_is_lb_pool_member":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbPoolMember")},
			"ibm_is_lb_pool_members":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbPoolMembers")},
			"ibm_is_lb_pools":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbPools")},
			"ibm_is_lb_profiles":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbProfiles")},
			"ibm_is_lbs":                                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsLbs")},
			"ibm_is_network_acl":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsNetworkAcl")},
			"ibm_is_network_acl_rule":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsNetworkAclRule")},
			"ibm_is_network_acl_rules":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsNetworkAclRules")},
			"ibm_is_network_acls":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsNetworkAcls")},
			"ibm_is_operating_system":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsOperatingSystem")},
			"ibm_is_operating_systems":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsOperatingSystems")},
			"ibm_is_placement_group":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsPlacementGroup")},
			"ibm_is_placement_groups":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsPlacementGroups")},
			"ibm_is_public_gateway":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsPublicGateway")},
			"ibm_is_public_gateways":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsPublicGateways")},
			"ibm_is_region":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsRegion")},
			"ibm_is_regions":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsRegions")},
			"ibm_is_security_group":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSecurityGroup")},
			"ibm_is_security_group_rule":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSecurityGroupRule")},
			"ibm_is_security_group_rules":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSecurityGroupRules")},
			"ibm_is_security_group_target":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSecurityGroupTarget")},
			"ibm_is_security_group_targets":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSecurityGroupTargets")},
			"ibm_is_security_groups":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSecurityGroups")},
			"ibm_is_snapshot":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSnapshot")},
			"ibm_is_snapshots":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSnapshots")},
			"ibm_is_ssh_key":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSshKey")},
			"ibm_is_ssh_keys":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSshKeys")},
			"ibm_is_subnet":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSubnet")},
			"ibm_is_subnet_reserved_ip":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSubnetReservedIp")},
			"ibm_is_subnet_reserved_ips":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSubnetReservedIps")},
			"ibm_is_subnets":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsSubnets")},
			"ibm_is_virtual_endpoint_gateway":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVirtualEndpointGateway")},
			"ibm_is_virtual_endpoint_gateway_ips":                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVirtualEndpointGatewayIps")},
			"ibm_is_virtual_endpoint_gateways":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVirtualEndpointGateways")},
			"ibm_is_volume":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVolume")},
			"ibm_is_volume_profile":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVolumeProfile")},
			"ibm_is_volume_profiles":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVolumeProfiles")},
			"ibm_is_volumes":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVolumes")},
			"ibm_is_vpc":                                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpc")},
			"ibm_is_vpc_address_prefix":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcAddressPrefix")},
			"ibm_is_vpc_address_prefixes":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcAddressPrefixes")},
			"ibm_is_vpc_default_routing_table":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcDefaultRoutingTable")},
			"ibm_is_vpc_routing_table":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcRoutingTable")},
			"ibm_is_vpc_routing_table_route":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcRoutingTableRoute")},
			"ibm_is_vpc_routing_table_routes":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcRoutingTableRoutes")},
			"ibm_is_vpc_routing_tables":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcRoutingTables")},
			"ibm_is_vpcs":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpcs")},
			"ibm_is_vpn_gateway":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpnGateway")},
			"ibm_is_vpn_gateway_connection":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpnGatewayConnection")},
			"ibm_is_vpn_gateway_connections":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpnGatewayConnections")},
			"ibm_is_vpn_gateways":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsVpnGateways")},
			"ibm_is_zone":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsZone")},
			"ibm_is_zones":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getIsZones")},
			"ibm_kms_key":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getKmsKey")},
			"ibm_kms_key_policies":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getKmsKeyPolicies")},
			"ibm_kms_key_rings":                                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getKmsKeyRings")},
			"ibm_kms_keys":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getKmsKeys")},
			"ibm_kp_key":                                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getKpKey")},
			"ibm_lbaas":                                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getLbaas")},
			"ibm_network_vlan":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getNetworkVlan")},
			"ibm_org":                                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getOrg")},
			"ibm_org_quota":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getOrgQuota")},
			"ibm_pi_catalog_images":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiCatalogImages")},
			"ibm_pi_cloud_connection":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiCloudConnection")},
			"ibm_pi_cloud_connections":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiCloudConnections")},
			"ibm_pi_cloud_instance":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiCloudInstance")},
			"ibm_pi_console_languages":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiConsoleLanguages")},
			"ibm_pi_dhcp":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiDhcp")},
			"ibm_pi_dhcps":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiDhcps")},
			"ibm_pi_image":                                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiImage")},
			"ibm_pi_images":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiImages")},
			"ibm_pi_instance":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiInstance")},
			"ibm_pi_instance_ip":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiInstanceIp")},
			"ibm_pi_instance_snapshots":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiInstanceSnapshots")},
			"ibm_pi_instance_volumes":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiInstanceVolumes")},
			"ibm_pi_instances":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiInstances")},
			"ibm_pi_key":                                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiKey")},
			"ibm_pi_keys":                                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiKeys")},
			"ibm_pi_network":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiNetwork")},
			"ibm_pi_network_port":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiNetworkPort")},
			"ibm_pi_placement_group":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiPlacementGroup")},
			"ibm_pi_placement_groups":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiPlacementGroups")},
			"ibm_pi_public_network":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiPublicNetwork")},
			"ibm_pi_pvm_snapshots":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiPvmSnapshots")},
			"ibm_pi_sap_profile":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiSapProfile")},
			"ibm_pi_sap_profiles":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiSapProfiles")},
			"ibm_pi_storage_pool_capacity":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiStoragePoolCapacity")},
			"ibm_pi_storage_pools_capacity":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiStoragePoolsCapacity")},
			"ibm_pi_storage_type_capacity":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiStorageTypeCapacity")},
			"ibm_pi_storage_types_capacity":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiStorageTypesCapacity")},
			"ibm_pi_system_pools":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiSystemPools")},
			"ibm_pi_tenant":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiTenant")},
			"ibm_pi_volume":                                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPiVolume")},
			"ibm_pn_application_chrome":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getPnApplicationChrome")},
			"ibm_resource_group":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getResourceGroup")},
			"ibm_resource_instance":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getResourceInstance")},
			"ibm_resource_key":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getResourceKey")},
			"ibm_resource_quota":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getResourceQuota")},
			"ibm_resource_tag":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getResourceTag")},
			"ibm_satellite_attach_host_script":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteAttachHostScript")},
			"ibm_satellite_cluster":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteCluster")},
			"ibm_satellite_cluster_worker_pool":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteClusterWorkerPool")},
			"ibm_satellite_cluster_worker_pool_zone_attachment":       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteClusterWorkerPoolZoneAttachment")},
			"ibm_satellite_endpoint":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteEndpoint")},
			"ibm_satellite_link":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteLink")},
			"ibm_satellite_location":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteLocation")},
			"ibm_satellite_location_nlb_dns":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSatelliteLocationNlbDns")},
			"ibm_scc_account_location":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccAccountLocation")},
			"ibm_scc_account_location_settings":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccAccountLocationSettings")},
			"ibm_scc_account_locations":                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccAccountLocations")},
			"ibm_scc_account_notification_settings":                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccAccountNotificationSettings")},
			"ibm_scc_posture_group_profile":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureGroupProfile")},
			"ibm_scc_posture_latest_scans":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureLatestScans")},
			"ibm_scc_posture_profile":                                 {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureProfile")},
			"ibm_scc_posture_profiles":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureProfiles")},
			"ibm_scc_posture_scan_summaries":                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureScanSummaries")},
			"ibm_scc_posture_scan_summary":                            {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureScanSummary")},
			"ibm_scc_posture_scope_correlation":                       {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureScopeCorrelation")},
			"ibm_scc_posture_scopes":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccPostureScopes")},
			"ibm_scc_si_note":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccSiNote")},
			"ibm_scc_si_notes":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccSiNotes")},
			"ibm_scc_si_occurrence":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccSiOccurrence")},
			"ibm_scc_si_occurrences":                                  {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccSiOccurrences")},
			"ibm_scc_si_providers":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSccSiProviders")},
			"ibm_schematics_action":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsAction")},
			"ibm_schematics_inventory":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsInventory")},
			"ibm_schematics_job":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsJob")},
			"ibm_schematics_output":                                   {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsOutput")},
			"ibm_schematics_resource_query":                           {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsResourceQuery")},
			"ibm_schematics_state":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsState")},
			"ibm_schematics_workspace":                                {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSchematicsWorkspace")},
			"ibm_secrets_manager_secret":                              {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSecretsManagerSecret")},
			"ibm_secrets_manager_secrets":                             {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSecretsManagerSecrets")},
			"ibm_security_group":                                      {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSecurityGroup")},
			"ibm_service_instance":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getServiceInstance")},
			"ibm_service_key":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getServiceKey")},
			"ibm_service_plan":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getServicePlan")},
			"ibm_space":                                               {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getSpace")},
			"ibm_tg_connection_prefix_filter":                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgConnectionPrefixFilter")},
			"ibm_tg_connection_prefix_filters":                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgConnectionPrefixFilters")},
			"ibm_tg_gateway":                                          {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgGateway")},
			"ibm_tg_gateways":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgGateways")},
			"ibm_tg_location":                                         {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgLocation")},
			"ibm_tg_locations":                                        {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgLocations")},
			"ibm_tg_route_report":                                     {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgRouteReport")},
			"ibm_tg_route_reports":                                    {Tok: tfbridge.MakeDataSource(mainPkg, mainMod, "getTgRouteReports")},
		},
		JavaScript: &tfbridge.JavaScriptInfo{
			PackageName: "@pulumiverse/ibm",
			// List any npm dependencies and their versions
			Dependencies: map[string]string{
				"@pulumi/pulumi": "^3.0.0",
			},
			DevDependencies: map[string]string{
				"@types/node": "^10.0.0", // so we can access strongly typed node definitions.
				"@types/mime": "^2.0.0",
			},
			// See the documentation for tfbridge.OverlayInfo for how to lay out this
			// section, or refer to the AWS provider. Delete this section if there are
			// no overlay files.
			//Overlay: &tfbridge.OverlayInfo{},
		},
		Python: &tfbridge.PythonInfo{
			PackageName: "pulumiverse_ibm",
			// List any Python dependencies and their version ranges
			Requires: map[string]string{
				"pulumi": ">=3.0.0,<4.0.0",
			},
		},
		Golang: &tfbridge.GolangInfo{
			ImportBasePath: filepath.Join(
				fmt.Sprintf("github.com/pulumiverse/pulumi-%[1]s/sdk/", mainPkg),
				tfbridge.GetModuleMajorVersion(version.Version),
				"go",
				mainPkg,
			),
			GenerateResourceContainerTypes: true,
		},
		CSharp: &tfbridge.CSharpInfo{
			RootNamespace: "Pulumiverse",
			PackageReferences: map[string]string{
				"Pulumi": "3.*",
			},
		},
	}

	prov.SetAutonaming(255, "-")

	return prov
}
